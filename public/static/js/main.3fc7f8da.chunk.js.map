{"version":3,"sources":["components/Header/terveystalo-logo.svg","components/Header/ekg.svg","serviceWorker.js","bootstrap/Browser.js","bootstrap/BreakPoints.js","components/Icon/component.js","components/Header/component.js","components/_Button/component.js","components/_ButtonProcessing/component.js","components/_ButtonAction/component.js","components/ButtonSubmit/component.js","components/ButtonCancel/component.js","components/_ModalSimple/component.js","components/_Modal/component.js","components/FormTableRow/component.js","components/LaboratoryTestForm/component.js","components/LaboratoryModalCreateItem/component.js","components/LaboratoryModalEditItem/component.js","components/LaboratoryModalPerformChecks/component.js","components/ListableFilterOption/component.js","components/ListableFilterGroup/component.js","components/LaboratoryTestListSortByFilterGroup/component.js","components/LaboratoryTestListOrderByFilterGroup/component.js","components/ButtonEdit/component.js","components/ButtonTrash/component.js","components/ConfirmationModal/component.js","components/ConfirmDeletionModal/component.js","components/ListableItem/component.js","components/Listable/component.js","components/ButtonAdd/component.js","components/LaboratoryTestListItem/component.js","components/LaboratoryTestList/component.js","components/App/component.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Browser","browser","detect","document","documentElement","classList","add","os","toLowerCase","replace","name","parseInt","version","BreakPoints","defaults","(max-width: 320px)","(max-width: 375px)","(max-width: 425px)","(max-width: 500px)","(max-width: 600px)","(max-width: 650px)","(max-width: 768px)","(max-width: 950px)","(max-width: 1024px)","setup","_this","this","Object","keys","forEach","breakPoint","matchQuery","matchMedia","addListener","handleBrowserResize","bind","media","htmlNode","remove","concat","matches","Icon","_ref","color","size","icon","spin","className","react_default","a","createElement","dist_default","iconSet","defaultProps","Header","props","src","logo","alt","component","ekg","_Button","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","activeIcon","bindEventHandlers","handleClick","handleMouseOut","handleMouseOver","event","disabled","onClick","hoverIcon","setState","classes","theme","push","getDerivedIconValue","hasError","hasSuccess","getDerivedClassNameList","join","getDefaultTrueIcon","getDerivedClassName","getDerivedDisabledState","onMouseOut","onMouseOver","getDerivedIcon","label","Component","_ButtonProcessing","get","prototype","processing","propTypes","PropTypes","bool","_ButtonAction","type","hoverType","oneOf","ButtonSubmit","ButtonCancel","ReactModal","setAppElement","_ModalSimple","submitButtonRef","React","createRef","getInitialState","unmounted","isOpen","timeouts","clearTimeout","closeModal","handleModalSubmit","status","statusMessage","updateSubmitButtonWithResult","isProcessing","modalTimeout","initialValues","fn","millisecs","_this2","setTimeout","_this3","setModalStateAsSuccess","delay","_this4","onRequestClose","message","removeModalState","getDerivedModalClassNameList","getDerivedModalOverlayClassNameList","description","split","map","item","key","lib_default","contentLabel","header","shouldCloseOnOverlayClick","getDerivedModalClassName","overlayClassName","getDerivedModalOverlayClassName","closeTimeoutMS","getDerivedDescription","component_ButtonCancel","cancelButtonLabel","getDerivedStatusMessageClassName","component_ButtonSubmit","ref","saveButtonHoverType","saveButtonHoverIcon","saveButtonLabel","saveButtonIcon","summary","_Modal","contentRef","Fragment","getDerivedDetails","getContent","FormTableRow","field","error","touched","forceShowError","required","formik_esm","value","readOnly","isSubmitting","options","option","minLength","maxLength","pattern","autoComplete","getDerivedSelect","getDerivedTextInput","hint","getDerivedRowClassName","htmlFor","getDerivedRowRequired","getDerivedField","getDerivedFieldHint","onBlur","onChange","Yup","msg","test","exclusive","params","reference","path","resolve","formikEnhancer","withFormik","enableReinitialize","mapPropsToValues","abbrv","unit","goodRangeMin","goodRangeMax","validateOnBlur","validateOnChange","validationSchema","shape","strict","trim","min","max","typeError","ifNotNullThenGreaterThanRefWhenRefHasValue","displayName","LaboratoryTestForm","form","loading","showErrors","submitting","onSubmitParent","handleFormElementBlur","errors","length","onNoErrorEncountered","onErrorEncountered","values","preventDefault","validateForm","then","setFieldsTouched","setSubmitting","promise","catch","obj","getFieldComponents","setTouched","component_FormTableRow","_this$props","registerSubmitElement","loadingMessage","onSubmit","getFields","button","style","display","LaboratoryModalCreateItem","submitButton","click","Promise","reject","fetch","method","mode","cache","credentials","headers","Content-Type","redirect","referrer","body","JSON","stringify","response","json","data","onSaved","setModalAsProcessing","commitForm","removeModalProcessingState","saveSuccessMessage","setModalStateAsError","LaboratoryTestForm_component","handleNoErrorEncountered","onEncounteredError","func","isRequired","string","LaboratoryModalEditItem","labTestId","setTestStateFromApi","xhrControllerLoad","abort","AbortController","signal","loadTestState","objectSpread","number","moreThan","LaboratoryModalPerformChecks","submitXhr","tests","id","unshift","getDerivedFormTableTestSelect","getDerivedFormTableCheckValue","arrayOf","ListableFilterOption","prop","selected","ListableFilterGroup","handleOptionSelect","onSelectOption","sortRef","component_ListableFilterOption","getDerivedOptionList","SORT_BY","LaboratoryTestListSortByFilterGroup","defaultOption","ORDER_BY","ButtonEdit","ButtonTrash","ConfirmationModal","ConfirmDeletionModal","onConfirm","deletedSuccessMessage","ListableItem","confirmDeleteIsTransitioning","confirmDelete","handleEditOnClick","handleDeleteOnClick","closeConfirmationModal","handleDeleteConfirmation","onEdit","onDelete","editModalIsTransitioning","slice","component_ConfirmDeletionModal","confirmDeleteDescription","confirmDeleteButtonLabel","getDerivedTruncatedName","contains","editable","component_ButtonEdit","component_ButtonTrash","deletable","getDerivedClassList","getDerivedEditButton","getDerivedInteriorRendering","getDerivedDeleteButton","getDerivedConfirmationDeletionModal","Listable","handleListableItemEdit","handleListableItemDelete","onEditItem","onDeleteItem","emptyMessage","emptyMessageAddItemDesktop","emptyMessageAddItemResponsive","ComponentName","getDerivedEmptyMessage","getDerivedItems","ButtonAdd","LaboratoryTestListItem","getDerivedAbbreviation","LaboratoryTestList","filters","sortKey","defaultSortKey","orderBy","defaultOrderBy","processingAdd","performChecksModalIsOpen","createModalIsOpen","editModalIsOpen","list","setListStateFromApi","closeCreateItemModalEditor","closeEditItemModalEditor","handleResponsiveHeaderClick","handleResponsiveFilterNavClick","handleResponsiveScrollerClick","handleSort","handleButtonAddTest","handleLabTestCreated","handleOnEditItem","handleOnDeleteItem","handleLabTestUpdated","handleButtonPerformChecks","closePerformChecksModalEditor","loadListState","current","toggle","openCreateItemModalEditor","openPerformChecksModalEditor","object","index","findIndex","splice","editingLabTestId","openEditItemModalEditor","_this5","removeItemFromDataAndUpdateState","defineProperty","b","_this6","_this7","_this8","_this9","sortFunction","orderByProps","sort","component_LaboratoryModalCreateItem","component_LaboratoryModalEditItem","LaboratoryModalPerformChecks_component","component_Button","component_LaboratoryTestListSortByFilterGroup","LaboratoryTestListOrderByFilterGroup_component_LaboratoryTestListSortByFilterGroup","getDerivedPerformChecksActionButton","component_ButtonAdd","component_Listable","getDerivedList","getDerivedModalCreateItem","getDerivedModalEditItem","getDerivedModalPerformChecks","App","Header_component","component_LaboratoryTestList","navigator","serviceWorker","ready","registration","unregister","ReactDOM","render","react_hot_loader","getElementById"],"mappings":"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","file":"static/js/main.3fc7f8da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/terveystalo-logo.5d98e83e.svg\";","module.exports = __webpack_public_path__ + \"static/media/ekg.bd59fb39.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { detect } from 'detect-browser';\n\n/**\n * Sets up the html.os and html.browser-chrome etc base classes used for feature\n * tweaking and layout fixes.\n *\n * @author Oliver Lillie\n */\nexport default {\n    setup() {\n        const browser = detect();\n        document.documentElement.classList.add(\n            browser.os.toLowerCase().replace(/[^a-z0-9]+/, '-'),\n            'browser-' + browser.name,\n            'browser-' + browser.name + '-v' + parseInt(browser.version, 10)\n        );\n    }\n}\n\n","/**\n * Controls the breapoint classes, `html.lte-768` and `html-gt-768` etc, that\n * automatically get updated when the app's browser is resized.\n *\n * In a typical app this would be left down to media queries to sort out since\n * the resolution and browser size does not change, however for development\n * purposes this allows easy browser resizing to apply various breakpoint fixes.\n *\n * @author Oliver Lillie\n */\nexport default {\n    defaults: {\n        '(max-width: 320px)': 320,\n        '(max-width: 375px)': 375,\n        '(max-width: 425px)': 425,\n        '(max-width: 500px)': 500,\n        '(max-width: 600px)': 600,\n        '(max-width: 650px)': 650,\n        '(max-width: 768px)': 768,\n        '(max-width: 950px)': 950,\n        '(max-width: 1024px)': 1024,\n    },\n\n    /**\n     * Binds the each of the breakpoints media query statements to\n     * `handleBrowserResize` which in turn modifies the html.xxx breakpoint\n     * classes.\n     *\n     * @author Oliver Lillie\n     */\n    setup() {\n        Object.keys(this.defaults).forEach(\n            (breakPoint) => {\n                const matchQuery = window.matchMedia(breakPoint);\n                matchQuery.addListener(this.handleBrowserResize.bind(this));\n\n                this.handleBrowserResize(matchQuery);\n            }\n        );\n    },\n\n    /**\n     * Handles the browser resize event and adds/removes the related breakpoint\n     * classes.\n     *\n     * The event is NOT debounced since it is not really intensive. Although\n     * arguably because it causes repaints it could be argued that it is\n     * intensive, however given the size of this demo code it is not warranted.\n     *\n     * @author Oliver Lillie\n     * @param {MediaQueryList} matchQuery\n     */\n    handleBrowserResize(matchQuery) {\n        const breakPoint = this.defaults[matchQuery.media];\n        const htmlNode = document.documentElement;\n        htmlNode.classList.remove(`gt-${breakPoint}`, `lte-${breakPoint}`);\n        htmlNode.classList.add(`${matchQuery.matches ? 'lte' : 'gt'}-${breakPoint}`);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IcomoonReact from 'icomoon-react';\n\nimport iconSet from './selection.json';\nimport './styles.scss';\n\n/**\n * Creates a component wrapper for the IcomoonReact component and provides\n * additional functionality of being able to provide both a `props.className`\n * and `props.spin` value.\n *\n * `props.spin` adds a class to spin the icon - basically used for loading\n * spinners.\n *\n * @author Oliver Lillie\n * @param {string|null} color\n * @param {string|number} size\n * @param {string} icon\n * @param {boolean} spin\n * @param className\n * @return {*}\n * @constructor\n */\nconst Icon = ({ color, size, icon, spin, className }) => {\n    return (\n        <IcomoonReact\n            iconSet={iconSet}\n            color=\"rgba(0, 0, 0)\"\n            size={size}\n            icon={icon}\n            className={(spin ? 'spin' : '') + ' ' + className}\n        />\n    );\n};\n\nIcon.propTypes = {\n    /** Any class to be added to the icon. **/\n    className: PropTypes.string,\n    /** The name of any icon in `./selection.json`. **/\n    icon: PropTypes.string.isRequired,\n    /** The hard coded size of the icon. Should raelly be set via css classes\n        using `font-size`. **/\n    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** If true, then the component is given a `\"spin\"` class which spins the\n        icon. **/\n    spin: PropTypes.bool\n};\n\nIcon.defaultProps = {\n    className: '',\n    size: '1em',\n    spin: false\n};\n\nexport default Icon;","import React from 'react';\n\nimport Icon from '../Icon/component';\n\nimport logo from './terveystalo-logo.svg';\nimport ekg from './ekg.svg';\nimport './styles.scss';\n\n/**\n * Renders the header of the app.\n * \n * @author Oliver Lillie\n * @param {Object} props\n * @return {*}\n * @constructor\n */\nconst Header = (props) => {\n    return (\n        <nav className=\"top-bar\">\n            <div className=\"upper\" />\n            <div className=\"middle\">\n                <img src={logo} alt=\"Terveystalo Logo\" />\n                <div className=\"labs\">\n                    <Icon icon=\"flask\" />\n                    <span>Labs</span>\n                </div>\n            </div>\n            <div className=\"lower\">\n                <div className=\"line\" />\n                <img src={ekg} alt=\"EKG rhythm\" />\n            </div>\n        </nav>\n    );\n};\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Icon from '../Icon/component';\n\nimport './styles.scss';\n\n/**\n * Base component class for buttons within the app.\n *\n * @author Oliver Lillie\n */\nexport default class _Button extends Component {\n    static propTypes = {\n        /** Disables the button as per `button[disabled]`. **/\n        disabled: PropTypes.bool,\n        /** Controls the label of the button. **/\n        label: PropTypes.string,\n        /** If set then this is the icon (from /components/Icon/selection.json) to be used inside the button. **/\n        icon: PropTypes.string,\n        /** If set then when the button is hovered over the icon prop is updated to this icon. **/\n        hoverIcon: PropTypes.string,\n        /** The onClick handler for the button. **/\n        onClick: PropTypes.func.isRequired,\n        /** The size of the button. **/\n        size: PropTypes.oneOf(['small', 'medium', 'large']),\n        /** The theme of the button. **/\n        theme: PropTypes.oneOf(['primary', 'secondary', 'transparent']),\n        /** Sets the button to be shown as a button that has errored. **/\n        hasError: PropTypes.bool,\n        /** Sets the button to be shown as a button that has success. **/\n        hasSuccess: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        disabled: false,\n        label: null,\n        icon: null,\n        hoverIcon: null,\n        size: 'medium',\n        theme: 'primary',\n        hasError: false,\n        hasSuccess: false\n    };\n\n    /**\n     * Sets the `state.activeIcon` to the value from `props.icon`.\n     *\n     * @author Oliver Lillie\n     * @param {*} props\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeIcon: props.icon\n        };\n\n        this.bindEventHandlers();\n    }\n\n    /**\n     * Binds the components event handlers to the class.\n     *\n     * @author Oliver Lillie\n     */\n    bindEventHandlers() {\n        this.handleClick = this.handleClick.bind(this);\n        this.handleMouseOut = this.handleMouseOut.bind(this);\n        this.handleMouseOver = this.handleMouseOver.bind(this);\n    }\n\n    /**\n     * Handles the buttons onClick event and bubbles it to the `onClick` prop.\n     * The props `onClick` scope is bound to the button.\n     *\n     * @author Oliver Lillie\n     * @param event\n     */\n    handleClick(event) {\n        if(this.props.disabled) {\n            return;\n        }\n\n        if(typeof this.props.onClick !== 'undefined') {\n            this.props.onClick.bind(this)(event);\n        }\n    }\n\n    /**\n     * Handles the mouse out event, which if using `props.hoverIcon` updates the\n     * `state.activeIcon`.\n     *\n     * @author Oliver Lillie\n     */\n    handleMouseOut() {\n        if(!this.props.icon || !this.props.hoverIcon) {\n            return;\n        }\n\n        this.setState({\n            activeIcon: this.props.icon\n        });\n    }\n\n    /**\n     * Handles the mouse over event, which if using `props.hoverIcon` updates\n     * the `state.activeIcon`.\n     *\n     * @author Oliver Lillie\n     */\n    handleMouseOver() {\n        if(!this.props.icon || !this.props.hoverIcon) {\n            return;\n        }\n        this.setState({\n            activeIcon: this.props.hoverIcon\n        });\n    }\n\n    /**\n     * Returns a list of class names that is to be added to the buttons class\n     * attribute.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedClassNameList() {\n        let classes = ['_Button', '_Button--size-' + this.props.size];\n\n        let theme = '_Button--theme-' + this.props.theme;\n        classes.push(theme);\n\n        const icon = this.getDerivedIconValue();\n        if(icon) {\n            classes.push('_Button--icon-' + icon);\n        } else {\n            classes.push('_Button--no-icon');\n        }\n\n        if(this.props.hasError === true) {\n            theme += '--errored';\n        } else if(this.props.hasSuccess === true) {\n            theme += '--success';\n        }\n        classes.push(theme);\n\n        return classes;\n    }\n\n    /**\n     * Returns a space seperated list of class names to be added to the\n     * `className` property of the button.\n     *\n     * @see this.getDerivedClassNameList\n     * @author Oliver Lillie\n     * @return {string}\n     */\n    getDerivedClassName() {\n        return this.getDerivedClassNameList().join(' ');\n    }\n\n    /**\n     * This function is for child classes to overload in order to provide an\n     * icon that is used as the default icon if the `props.icon` value is set\n     * to `true`.\n     *\n     * @author Oliver Lillie\n     * @return {null}\n     */\n    getDefaultTrueIcon() {\n        return null;\n    }\n\n    /**\n     * Returns the icon that should be used by the button, if any.\n     *\n     * @author Oliver Lillie\n     * @return {null|string}\n     */\n    getDerivedIconValue() {\n        if(this.state.activeIcon === null) {\n            return null;\n        }\n\n        let icon;\n        if(this.state.activeIcon === true) {\n            icon = this.getDefaultTrueIcon();\n        } else {\n            icon = this.state.activeIcon;\n        }\n\n        if(!icon) {\n            return null;\n        }\n\n        return icon;\n    }\n\n    /**\n     * Returns the Icon component if an icon is being used in the button.\n     * Otherwise null returns.\n     *\n     * @author Oliver Lillie\n     * @return {null|Icon}\n     */\n    getDerivedIcon() {\n        const icon = this.getDerivedIconValue();\n        if(!icon) {\n            return null;\n        }\n\n        return (\n            <Icon className={'icon-' + icon} icon={icon} />\n        );\n    }\n\n    /**\n     * Returns the disabled state of the button. This function is designed to be\n     * overloaded by child classes in case addition props determine the disabled\n     * state of the button.\n     *\n     * @author Oliver Lillie\n     * @return {Boolean}\n     */\n    getDerivedDisabledState() {\n        return this.props.disabled;\n    }\n\n    /**\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    render() {\n        return (\n            <button\n                className={this.getDerivedClassName()}\n                disabled={this.getDerivedDisabledState()}\n                onClick={this.handleClick}\n                onMouseOut={this.handleMouseOut}\n                onMouseOver={this.handleMouseOver}\n            >\n                {this.getDerivedIcon()}\n                <span>{this.props.label}</span>\n            </button>\n        );\n    }\n};\n","import PropTypes from 'prop-types';\n\nimport _Button from '../_Button/component';\n\nimport './styles.scss';\n\n/**\n * Extends _Button class to provide a button that can be used to indicate a\n * process is underway. When put into processing the button has a processing\n * stripe bar at the bottom.\n *\n * @author Oliver Lillie\n */\nexport default class _ButtonProcessing extends _Button {\n    static propTypes = {\n        ..._Button.propTypes,\n        /** Determines if the state of the button is in processing mode or not.\n         **/\n        processing: PropTypes.bool\n    };\n\n    static defaultProps = {\n        ..._Button.defaultProps,\n        processing: false\n    };\n\n    /**\n     * Extends the classes for the button to added a processing class when\n     * `props.processing = true`.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedClassNameList() {\n        let classes = super.getDerivedClassNameList();\n\n        classes.push('_Button--stripe');\n        if(this.props.processing === true) {\n            classes.push('_Button--stripe--processing');\n        }\n\n        return classes;\n    }\n\n    /**\n     * If the button is processing then the button is disabled.\n     *\n     * @author Oliver Lillie\n     * @return {boolean}\n     */\n    getDerivedDisabledState() {\n        if(this.props.processing === true) {\n            return true;\n        }\n\n        return super.getDerivedDisabledState();\n    }\n};\n","import PropTypes from 'prop-types';\n\nimport _ButtonProcessing from '../_ButtonProcessing/component';\n\nimport './styles.scss';\n\n/**\n * Extends _ButtonProcessing in order to provide \"action\" buttons , eg primary\n * and \"secondary\" which are used to associate highlighting and priority to\n * buttons.\n *\n * @author Oliver Lillie\n */\nexport default class _ButtonAction extends _ButtonProcessing {\n    static propTypes = {\n        ..._ButtonProcessing.propTypes,\n        /** The type of action this should be. Primary is highlighted. Secondary\n            if bordered and has a background of the same colour as the page.\n            Transparent is the same as secondary except without a border. **/\n        type: PropTypes.oneOf(['primary', 'secondary', 'transparent']),\n        /** This determines the hover state of the button. A positive button\n            makes the button highlight in a positive, ie green manour. A\n            negative button has a \"red\" hover style to associate with a negative\n            action. The distinction when used throughout an application is\n            fairly obvious and aids the user from accidentally making a mistake.\n         **/\n        hoverType: PropTypes.oneOf(['positive', 'negative', null])\n    };\n\n    static defaultProps = {\n        ..._ButtonProcessing.defaultProps,\n        type: 'primary',\n        hoverType: null\n    };\n\n    /**\n     * Extends the classes of the button and adds class names for the\n     * `prop.type` and the `prop.hoverType` values.\n     *\n     * @author Oliver Lillie\n     */\n    getDerivedClassNameList() {\n        let classes = super.getDerivedClassNameList();\n\n        classes.push('_ButtonAction', '_ButtonAction--' + this.props.type);\n\n        if(this.props.hoverType !== null) {\n            classes.push('_ButtonAction--hoverType-' + this.props.hoverType);\n        }\n\n        return classes;\n    }\n};\n","import _ButtonAction from \"../_ButtonAction/component\";\n\n/**\n * Extends _ButtonAction to create a button component that has a default icon\n * `\"save\"`.\n *\n * @author Oliver Lillie\n */\nexport default class ButtonSubmit extends _ButtonAction {\n    static defaultProps = {\n        ..._ButtonAction.defaultProps,\n        icon: 'save',\n    };\n};\n","import _Button from \"../_Button/component\";\n\n/**\n * Extends _Button to create a button component that has no default icon but\n * a default label of `\"Cancel\"`.\n *\n * @author Oliver Lillie\n */\nexport default class ButtonCancel extends _Button {\n    static defaultProps = {\n        ..._Button.defaultProps,\n        label: 'Cancel',\n        icon: null\n    };\n};\n","import React, { Component } from 'react';\nimport ReactModal from 'react-modal';\nimport PropTypes from 'prop-types';\n\nimport ButtonSubmit from \"../ButtonSubmit/component\";\nimport ButtonCancel from \"../ButtonCancel/component\";\n\nimport './styles.scss';\n\nif (process.env.NODE_ENV !== 'testing') {\n    ReactModal.setAppElement('#root');\n}\n\n/**\n * Creates a basic modal window for the application with header, main and\n * footer actions. It utilises `react-modal`.\n *\n * @author Oliver Lillie\n */\nexport default class _ModalSimple extends Component {\n    submitButtonRef = React.createRef();\n\n    static propTypes = {\n        /** Controls the open and closed state of the modal window. **/\n        isOpen: PropTypes.bool,\n        /** This sends the signal up the calmlstack that the modal wants to close\n            itself. It's neccesary to send the signal up for the parent to\n            change the `isOpen` prop of the modal in order to prevent various\n            stack looping issues. This might not be the best way to handle this\n            and should be re-examined at some point. **/\n        onRequestClose: PropTypes.func.isRequired,\n        /** This is the text that is entered into the header of the modal window\n         **/\n        header: PropTypes.string,\n        /** This is the content that will be populated into the modal window.\n         **/\n        description: PropTypes.string,\n        /** This is the _Button.label prop of the cancel/close modal button. **/\n        cancelButtonLabel: PropTypes.string,\n        /** This is the _Button.label prop of the positive modal action button.\n         **/\n        saveButtonLabel: PropTypes.string,\n        /** This is the _Button.icon prop of the positive modal window action\n            button. **/\n        saveButtonIcon: PropTypes.string,\n        /** This is the _Button.hoverIcon prop of the positive modal window\n            action button. **/\n        saveButtonHoverIcon: PropTypes.string,\n        /** This is the _Button.hoverType prop of the positive modal window\n            action button. **/\n        saveButtonHoverType: PropTypes.oneOf(['positive', 'negative', null]),\n    };\n\n    static defaultProps = {\n        isOpen: false,\n        summary: 'More Information',\n        cancelButtonLabel: 'Cancel',\n        saveButtonLabel: 'Save',\n        saveButtonIcon: 'save',\n        saveButtonHoverIcon: null,\n        saveButtonHoverType: null,\n        description: null\n    };\n\n    /**\n     * Sets the initial state for `state.isOpen` from the props.\n     *\n     * @author Oliver Lillie\n     * @inheritDoc\n     */\n    static getDerivedStateFromProps(props, state) {\n        return {\n            isOpen: props.isOpen\n        };\n    }\n\n    /**\n     * Sets the initial state by calling `_ModalSimple.getInitialState` and\n     * binds the modals event handlers.\n     *\n     * In addition a protected variable `unmounted` is set to determine if the\n     * modal window has been removed from the DOM.\n     *\n     * @author Oliver Lillie\n     * @param {*} props\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = this.getInitialState();\n\n        this.bindEventHandlers();\n\n        this.unmounted = false;\n    }\n\n    /**\n     * Clears any state timeouts that have been created from calling\n     * `_ModalSimple.delay` and sets the protected variable `unmounted` to true.\n     *\n     * @author Oliver Lillie\n     */\n    componentWillUnmount() {\n        this.unmounted = true;\n        this.state.timeouts.forEach(clearTimeout);\n    }\n\n    /**\n     * Binds event handlers.\n     *\n     * @author Oliver Lillie\n     */\n    bindEventHandlers() {\n        this.closeModal = this.closeModal.bind(this);\n        this.handleModalSubmit = this.handleModalSubmit.bind(this);\n    }\n\n    /**\n     * The modals have their initial states reset at various points and\n     * therefore in order to facilitate ease of reset this function returns the\n     * initial state of the modal.\n     *\n     * @author Oliver Lillie\n     * @return {{hasSuccess: boolean, initialValues: {}, isOpen: Boolean, modalTimeout: number, timeouts: Array, isProcessing: boolean, updateSubmitButtonWithResult: boolean, hasError: boolean, statusMessage: null, status: null}}\n     */\n    getInitialState() {\n        return {\n            timeouts: [],\n            status: null,\n            isOpen: this.props.isOpen,\n            statusMessage: null,\n            updateSubmitButtonWithResult: false,\n            hasError: false,\n            hasSuccess: false,\n            isProcessing: false,\n            modalTimeout: 150,\n            initialValues: {}\n        };\n    }\n\n    /**\n     * Used to delay function calls by x millisecs.\n     *\n     * The timeouts created from calling this function are tracked and when the\n     * component is unmounted the setTimeouts are canceled. This is to prevent\n     * any updates to the component from setTimeouts when the modal becomes\n     * unmounted.\n     *\n     * @author Oliver Lillie\n     * @param {Function} fn\n     * @param {number} millisecs\n     */\n    delay(fn, millisecs) {\n        if(this.unmounted === true) {\n            return;\n        }\n        \n        this.state.timeouts.push(\n            setTimeout(() => {\n                if(this.unmounted) {\n                    return;\n                }\n                fn();\n            }, millisecs)\n        );\n    }\n\n    /**\n     * This handles the submit of a modal button and is called from the positive\n     * modal window action.\n     *\n     * This should be extended by any child class.\n     *\n     * @author Oliver Lillie\n     * @param {Event} event\n     */\n    handleModalSubmit(event) {\n        // to be overridden by child classes.\n        this.setModalStateAsSuccess(null, true);\n\n        this.delay(\n            () => {\n                this.closeModal();\n            },\n            1500\n        );\n    }\n\n    /**\n     * Closes the modal window -ish. It sets the internal state of the window,\n     * but then fires of a call to `props.onRequestClose` callback to get the\n     * parent to change the `prop.isOpen` value of the modal. The callback is\n     * done in a delay in order to all the css transitions to fade out the modal\n     * before calling the parent. This is because the parent will usually remove\n     * the component node instead of just setting the props.isOpen value and if\n     * the component were just removed there would be no smooth transition out.\n     *\n     * @author Oliver Lillie\n     * @param event\n     */\n    closeModal(event) {\n        this.setState({\n            status: 'closed'\n        });\n\n        // in order to accomodate the transitions for the close of the modal\n        // windows, we need to request the close of the modal in a short delay\n        // in the amount that corresponds to the transition animation length\n        // so the dialog is animated out before removal\n        this.delay(\n            () => {\n                this.setState({\n                    status: null\n                });\n                this.props.onRequestClose(event);\n            },\n            150\n        );\n    }\n\n    /**\n     * Sets the internal state of the modal as in an error state. The message is\n     * shown next to the positive action button. If the\n     * `updateSubmitButtonWithResult` is set to true then the the styles of the\n     * primary positive action button is updated to also be in an error state.\n     *\n     * @author Oliver Lillie\n     * @param {string} message\n     * @param {boolean|undefined} updateSubmitButtonWithResult\n     */\n    setModalStateAsError(message, updateSubmitButtonWithResult) {\n        this.setState({\n            statusMessage: message,\n            updateSubmitButtonWithResult: updateSubmitButtonWithResult,\n            hasError: true,\n        });\n    }\n\n    /**\n     * Sets the internal state of the modal as in a success state. The message\n     * is shown next to the positive action button. If the\n     * `updateSubmitButtonWithResult` is set to true then the the styles of the\n     * primary positive action button is updated to also be in a success state.\n     *\n     * @author Oliver Lillie\n     * @param {string} message\n     * @param {boolean|undefined} updateSubmitButtonWithResult\n     */\n    setModalStateAsSuccess(message, updateSubmitButtonWithResult) {\n        this.removeModalState();\n        this.setState({\n            statusMessage: message,\n            hasSuccess: true,\n            updateSubmitButtonWithResult: updateSubmitButtonWithResult,\n            modalTimeout: 1500\n        });\n    }\n\n    /**\n     * Removes any error or success state (from\n     * _ModalSimple.setModalSuccessState or _ModalSimple.setModalStateAsError)\n     * from the modal window, including any message put next to the primary\n     * positive action button.\n     *\n     * @author Oliver Lillie\n     */\n    removeModalState() {\n        this.setState({\n            updateSubmitButtonWithResult: false,\n            statusMessage: null,\n            hasError: false,\n            hasSuccess: false,\n        });\n    }\n\n    /**\n     * Sets the modal's state as processing. This should be called when any form\n     * or XHR triggered from the modal when the modal is submitting. It updates\n     * the primary positive action button and puts it in a processing state.\n     *\n     * @author Oliver Lillie\n     */\n    setModalAsProcessing() {\n        this.setState({\n            isProcessing: true\n        });\n    }\n\n    /**\n     * Removes the processing state added from _ModalSimple.setModalAsProcessing\n     *\n     * @author Oliver Lillie\n     */\n    removeModalProcessingState() {\n        this.setState({\n            isProcessing: false\n        });\n    }\n\n    /**\n     * Buils the status message (from setting a success or error state) class\n     * list.\n     *\n     * @author Oliver Lillie\n     * @return {string}\n     */\n    getDerivedStatusMessageClassName() {\n        let classes = ['status-message'];\n\n        if(this.state.hasError === true) {\n            classes.push('status-message--error');\n        } else if(this.state.hasSuccess === true) {\n            classes.push('status-message--success');\n        } else {\n            classes.push('status-message--hidden');\n        }\n\n        return classes.join(' ');\n    }\n\n    /**\n     * Returns an array of classes that the modal dialog should be given.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedModalClassNameList() {\n        let classes = ['_ModalSimple'];\n\n        if(this.state.hasSuccess === true) {\n            classes.push('_ModalSimple--state-success');\n        }\n\n        classes.push('_ModalSimple--status-' + (this.state.status || 'none'));\n\n        return classes;\n    }\n\n    /**\n     * Returns the modal classes by calling\n     * _ModalSimple.getDerivedModalClassNameList and then joining the results.\n     *\n     * @author Oliver Lillie\n     * @return {string}\n     */\n    getDerivedModalClassName() {\n        return this.getDerivedModalClassNameList().join(' ');\n    }\n\n    /**\n     * Returns an array of classes that the modal overlay should be given.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedModalOverlayClassNameList() {\n        let classes = ['_ModalSimple__Overlay'];\n\n        if(this.state.hasSuccess === true) {\n            classes.push('_ModalSimple__Overlay--state-success');\n        }\n\n        classes.push('_ModalSimple__Overlay--status-' + (this.state.status || 'none'));\n\n        return classes;\n    }\n\n    /**\n     * Returns the modals overlay classes by calling\n     * _ModalSimple.getDerivedModalOverlayClassNameList and then joining the\n     * results.\n     *\n     * @author Oliver Lillie\n     * @return {string}\n     */\n    getDerivedModalOverlayClassName() {\n        return this.getDerivedModalOverlayClassNameList().join(' ');\n    }\n\n    /**\n     * Splits `props.description` by line breaks and adds <br> breaks in place\n     * to allow simple formatting.\n     *\n     * @author Oliver Lillie\n     * @return {*[]}\n     */\n    getDerivedDescription() {\n        return this.props.description.split(/(?:\\r\\n|\\r|\\n)/g).map((item, key) => {\n            return (\n                <span key={key}>{item}<br/></span>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <ReactModal\n                isOpen={this.state.isOpen}\n                contentLabel={this.props.header}\n                onRequestClose={this.closeModal}\n                shouldCloseOnOverlayClick={false}\n                className={this.getDerivedModalClassName()}\n                overlayClassName={this.getDerivedModalOverlayClassName()}\n                closeTimeoutMS={this.state.modalTimeout}\n            >\n                <section>\n                    <header>{this.props.header}</header>\n                    <main>\n                        {this.getDerivedDescription()}\n                    </main>\n                    <footer>\n                        <div className=\"buttons buttons--left\">\n                            <ButtonCancel\n                                label={this.props.cancelButtonLabel}\n                                theme=\"transparent\"\n                                onClick={this.closeModal}\n                            />\n                        </div>\n                        <div className=\"buttons buttons--right\">\n                            <span className={this.getDerivedStatusMessageClassName()}>{this.state.statusMessage}</span>\n                            <ButtonSubmit\n                                ref={this.submitButtonRef}\n                                hoverType={this.props.saveButtonHoverType}\n                                hoverIcon={this.props.saveButtonHoverIcon}\n                                hasError={this.state.hasError && this.state.updateSubmitButtonWithResult}\n                                hasSuccess={this.state.hasSuccess && this.state.updateSubmitButtonWithResult}\n                                label={this.props.saveButtonLabel}\n                                icon={this.state.hasSuccess ? 'tick' : this.props.saveButtonIcon}\n                                processing={this.state.isProcessing}\n                                onClick={this.handleModalSubmit}\n                            />\n                        </div>\n                    </footer>\n                </section>\n            </ReactModal>\n        );\n    }\n}\n","import React  from 'react';\nimport ReactModal from 'react-modal';\n\nimport _ModalSimple from \"../_ModalSimple/component\";\nimport ButtonSubmit from \"../ButtonSubmit/component\";\nimport ButtonCancel from \"../ButtonCancel/component\";\nimport Icon from \"../Icon/component\";\n\nif (process.env.NODE_ENV !== 'testing') {\n    ReactModal.setAppElement('#root');\n}\n\n/**\n * Extends _ModalSimple to provide slightly more complex functionality in\n * Modals. The description is treated as a `<details>` HTML5 element instead of\n * providing the content, allowing easy additions of more information summaries\n * at the top of complex modal forms. Because of this it also adds a summary\n * propType which is treated as the related `<summary>` HTML5 element content.\n *\n * Content is then derived by extending this modal in child classes and\n * overriding the `getContent` function to allow the child classes to interally\n * specify the content of the modal.\n *\n * @author Oliver Lillie\n */\nexport default class _Modal extends _ModalSimple {\n    /** Provides a reference for any content node created in `getContent` **/\n    contentRef = React.createRef();\n\n    /**\n     * This should return the content for the modal and should be overloaded by\n     * any child class.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getContent() {\n        return (\n            <></>\n        );\n    }\n\n    /**\n     * Builds the `<details><summary>` HTML5 nodes based of if a\n     * `props.description` has been given. If it hasn't the modal window does\n     * not contain a more information summary at the top of the modal.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedDetails() {\n        if(!this.props.description) {\n            return null;\n        }\n\n        return (\n            <details>\n                <summary>\n                    <Icon icon=\"info\"/>\n                    <span>{this.props.summary}</span>\n                </summary>\n                <p>{this.props.description}</p>\n            </details>\n        );\n    }\n\n    /**\n     * Returns a list of classes to be given to the modal window.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedModalClassNameList() {\n        let classes = super.getDerivedModalClassNameList();\n\n        classes.push('_Modal');\n\n        return classes;\n    }\n\n\n    /**\n     * Returns a list of classes to be given to the modal window's overlay.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedModalOverlayClassNameList() {\n        let classes = super.getDerivedModalOverlayClassNameList();\n\n        classes.push('_Modal--overlay');\n\n        return classes;\n    }\n\n    render() {\n        // if the state of the component is not open then there is no point\n        // rendering anything into the DOM yet, so short circuit here.\n        if(!this.state.isOpen) {\n            return null;\n        }\n\n        return (\n            <ReactModal\n                isOpen={this.state.isOpen}\n                contentLabel={this.props.header}\n                onRequestClose={this.closeModal}\n                shouldCloseOnOverlayClick={false}\n                className={this.getDerivedModalClassName()}\n                overlayClassName={this.getDerivedModalOverlayClassName()}\n                closeTimeoutMS={this.state.modalTimeout}\n            >\n                <section>\n                    <header>{this.props.header}</header>\n                    <main>\n                        {this.getDerivedDetails()}\n                        {this.getContent()}\n                    </main>\n                    <footer>\n                        <div className=\"buttons buttons--left\">\n                            <ButtonCancel\n                                label={this.props.cancelButtonLabel}\n                                theme=\"transparent\"\n                                onClick={this.closeModal}\n                            />\n                        </div>\n                        <div className=\"buttons buttons--right\">\n                            <span className={this.getDerivedStatusMessageClassName()}>{this.state.statusMessage}</span>\n                            <ButtonSubmit\n                                ref={this.submitButtonRef}\n                                hoverType={this.props.saveButtonHoverType}\n                                hasError={this.state.hasError && this.state.updateSubmitButtonWithResult}\n                                hasSuccess={this.state.hasSuccess && this.state.updateSubmitButtonWithResult}\n                                label={this.props.saveButtonLabel}\n                                icon={this.state.hasSuccess && this.state.updateSubmitButtonWithResult ? 'tick' : this.props.saveButtonIcon}\n                                processing={this.state.isProcessing}\n                                onClick={this.handleModalSubmit}\n                            />\n                        </div>\n                    </footer>\n                </section>\n            </ReactModal>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport {ErrorMessage, Field} from \"formik\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Provides a component that contains a Formik Field component. It puts the\n * input into a <tr> with a <td class=\"label\"> and <td class=\"input\">.\n *\n * It allows an input to hold various different properties to aid in completion\n * of a form.\n *\n * @author Oliver Lillie\n */\nexport default class FormTableRow extends Component {\n\n    static propTypes = {\n        /** The value of the field. **/\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        /** From Formik. Any error that the field currently has. **/\n        error: PropTypes.string,\n        /** From Formik. If the field has been \"touched\" by the user, ie focus\n            in then blur. **/\n        touched: PropTypes.bool,\n        /** Used to signal if the form input should be force shown as errored\n            due to an issue with formik and validation being called outside of\n            the main formik form (as with formiks in modals) **/\n        forceShowError: PropTypes.bool,\n        /** Used to signal that the form containing the input is submitting (ie\n            being processed) **/\n        isSubmitting: PropTypes.bool,\n        /** The field object. **/\n        field: PropTypes.shape({\n            /** The `input[name]` attribute of the field. **/\n            name: PropTypes.string.isRequired,\n            /** The content of the label that is created for the field. **/\n            label:  PropTypes.string.isRequired,\n            /** The type of the field being created. It would typically be\n                extended with other types - however we have no other types at\n                the moment. **/\n            type:  PropTypes.oneOf(['text', 'number', 'select']),\n            /** Used for `props.field.type = \"select\"` only and is an array of\n                option objects. **/\n            options:  PropTypes.arrayOf(PropTypes.shape({\n                /** The value of the select option. **/\n                value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n                /** The label of the select option. **/\n                label: PropTypes.string.isRequired\n            })),\n            /** A input hint that is put into the `td.input` column under the\n                input that is being created. It should be used to provide short\n                consice help and is not for verbose instructions. **/\n            hint: PropTypes.string,\n            /** Used to set `input[minlength]` attributes. **/\n            minLength: PropTypes.number,\n            /** Used to set `input[maxlength]` attributes. **/\n            maxLength: PropTypes.number,\n            /** Used to set `input[required]` attributes, but in addition when a\n                field is required the `td.label` gets an indicator that this\n                field is reqired. **/\n            required: PropTypes.bool,\n            /** Used to set `input[pattern]` attributes. **/\n            pattern: PropTypes.string\n        }).isRequired,\n        onBlur: PropTypes.func,\n        onChange: PropTypes.func,\n    };\n\n    static defaultProps = {\n        value: '',\n        touched: false,\n        forceShowError: false,\n        isSubmitting: false,\n        error: null,\n        onBlur: () => {},\n        onChange: () => {},\n    };\n\n    /**\n     * Creates a list of classes to be given to the `<tr>` element.\n     *\n     * If the input has an error then the row is also given an `\"errored\"`\n     * class.\n     *\n     * @author Oliver Lillie\n     * @return {string}\n     */\n    getDerivedRowClassName() {\n        let classes = [this.props.field.name];\n\n        if(!!this.props.error && (this.props.touched === true || this.props.forceShowError === true)) {\n            classes.push('errored');\n        }\n\n        return classes.join(' ');\n    }\n\n    /**\n     * Creates the required indicator element added to `tr.label` when the\n     * `props.field.required = true`.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedRowRequired() {\n        if(this.props.field.required === true) {\n            return (\n                <p className=\"required\">Required</p>\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates the formik select element but wrapped in a `div.select-wrapper`\n     * for styling purposes.\n     *\n     * @author Oliver Lillie\n     * @return {Element}\n     */\n    getDerivedSelect() {\n        return (\n            <div className=\"select-wrapper\">\n                <Field component=\"select\"\n                       name={this.props.field.name}\n                       value={this.props.value}\n                       readOnly={this.props.isSubmitting}\n                >\n                    {this.props.field.options.map((option) => (<option value={option.value} key={option.value}>{option.label}</option>))}\n                </Field>\n            </div>\n        );\n    }\n\n    /**\n     * Creates the formik Field component for the input.\n     *\n     * @author Oliver Lillie\n     * @return {Field}\n     */\n    getDerivedTextInput() {\n        // required is purposefully not added here because we don't want to use the\n        // html error messages\n        return (\n            <Field name={this.props.field.name}\n                   type={this.props.field.type}\n                   value={this.props.value}\n                   minLength={this.props.field.minLength}\n                   maxLength={this.props.field.maxLength}\n                   pattern={this.props.field.pattern}\n                   autoComplete=\"off\"\n                   readOnly={this.props.isSubmitting}\n            />\n        );\n    }\n\n    /**\n     * Returns the formik field.\n     *\n     * @author Oliver Lillie\n     * @return {Element|Field}\n     */\n    getDerivedField() {\n        if(this.props.field.type === 'select') {\n            return this.getDerivedSelect();\n        }\n\n        return this.getDerivedTextInput();\n    }\n\n    /**\n     * If `props.field.hint` is given then it is created and any line breaks are\n     * turned into `<br>` elements.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedFieldHint() {\n        if(this.props.field.hint) {\n            return (\n                <p className=\"hint\">{this.props.field.hint.split(/(?:\\r\\n|\\r|\\n)/g).map((item, key) => {\n                    return <span key={key}>{item}<br/></span>\n                })}</p>\n            );\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <tr className={this.getDerivedRowClassName()}>\n                <td className=\"label\"><label htmlFor={this.props.field.name}>{this.props.field.label}</label>\n                    {this.getDerivedRowRequired()}\n                </td>\n                <td className=\"input\">{this.getDerivedField()}\n                    <p className=\"error\"><ErrorMessage name={this.props.field.name}/></p>\n                    {this.getDerivedFieldHint()}\n                </td>\n            </tr>\n        );\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport * as Yup from 'yup';\nimport { withFormik } from \"formik\";\n\nimport Icon from '../Icon/component';\nimport FormTableRow from \"../FormTableRow/component\";\n\nimport './styles.scss';\n\n/**\n * Adds a special validation method for checking that the goodRangeMax is\n * greater than the goodRangeMin value if set.\n *\n * @author Oliver Lillie\n */\nYup.addMethod(\n    Yup.number,\n    'ifNotNullThenGreaterThanRefWhenRefHasValue',\n    function(ref, msg) {\n        return this.test({\n            name: 'ifNotNullThenGreaterThanRefWhenRefHasValue',\n            exclusive: false,\n            // eslint-disable-next-line\n            message: msg || '${path} must be greater than ${reference}',\n            params: {\n                reference: ref.path\n            },\n            test: function(value) {\n                return typeof this.resolve(ref) === 'undefined'\n                    || typeof value === 'undefined'\n                    || value === null\n                    || value >= this.resolve(ref)\n            }\n        })\n    }\n);\n\nconst formikEnhancer = withFormik({\n    enableReinitialize: true,\n\n    mapPropsToValues(props) {\n        return {\n            name: props.name,\n            abbrv: props.abbrv,\n            unit: props.unit,\n            goodRangeMin: props.goodRangeMin,\n            goodRangeMax: props.goodRangeMax,\n        };\n    },\n\n    validateOnBlur: true,\n\n    validateOnChange: false,\n\n    validationSchema: Yup.object().shape({\n        name: Yup.string()\n            .strict(true)\n            .trim()\n            .min(2, 'The name of the test must be at least 2 characters long.')\n            .max(255, 'The name of the test must be at less than 255 characters in length.')\n            .required('The name of the test is required!'),\n        abbrv: Yup.string()\n            .strict(true)\n            .trim()\n            .min(1, 'The abbreviation of the test must be at least 1 character long.')\n            .max(5, 'The abbreviation of the test must be at less than 5 characters in length.')\n            .required('The abbreviation of the test is required!'),\n        unit: Yup.string()\n            .strict(true)\n            .trim()\n            .min(1, 'The unit of measurement for the test must be at least 1 characters long.')\n            .max(20, 'The unit of measurement for the test must be at less than 20 characters in length.')\n            .required('The unit of measurement for the test is required!'),\n        goodRangeMin: Yup.number()\n            .typeError('The minimum bounds of the \"good value\" range must be a number.'),\n        goodRangeMax: Yup.number()\n            .ifNotNullThenGreaterThanRefWhenRefHasValue(Yup.ref('goodRangeMin'), 'The maximum bounds of the \"good value\" must be greater than or equal to the minimum bounds value.')\n            .typeError('The maximum bounds of the \"good value\" range must be a number.'),\n    }),\n\n    displayName: 'LaboratoryTestForm', // helps with React DevTools\n});\n\n/**\n * Creates the lab test form which is used by both the\n * `LaboratoryModalCreateItem` and `LaboratoryModalEditItem` components.\n *\n * @author Oliver Lillie\n */\nclass LaboratoryTestForm extends Component {\n\n    form = React.createRef();\n\n    static propTypes = {\n        /** Determines if the form is loading. This is only used when the data\n            to prepoulate the form is loaded from the server. **/\n        loading: PropTypes.bool,\n        /** The message to display when loading data from the server. **/\n        loadingMessage: PropTypes.string,\n        /** The name value to fill the form with initially. **/\n        name: PropTypes.string,\n        /** The abbreviation value to fill the form with initially. **/\n        abbrv: PropTypes.string,\n        /** The unit value to fill the form with initially. **/\n        unit: PropTypes.string,\n        /** The good range min value to fill the form with initially. **/\n        goodRangeMin: PropTypes.number,\n        /** The good range max value to fill the form with initially. **/\n        goodRangeMax: PropTypes.number,\n        // onSubmit: PropTypes.func.isRequired,\n        /** The callback that will bubble the form submission event back up\n            to the parent component. **/\n        onSubmitParent: PropTypes.func.isRequired,\n        /** The callback that will bubble that there are no errors encountered\n            in the form back up to the parent component. **/\n        onNoErrorEncountered: PropTypes.func,\n        /** The callback that will bubble that there are errors encountered in\n            the form back up to the parent component. **/\n        onErrorEncountered: PropTypes.func,\n        /** The api function to \"hack\": formik into accepting form submissions\n            from outside of formik. **/\n        registerSubmitElement: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        loading: false,\n        loadingMessage: 'Loading data, please wait.',\n        name: '',\n        abbrv: '',\n        unit: '',\n        goodRangeMin: null,\n        goodRangeMax: null,\n        onNoErrorEncountered: () => {},\n        onErrorEncountered: () => {},\n    };\n\n    /**\n     * Binds the event handles and sets the intial state.\n     *\n     * @author Oliver Lillie\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: false,\n            showErrors: false,\n            submitting: false,\n        };\n\n        this.bindEventHandlers();\n    }\n\n    /**\n     * Binds the event handles to the component.\n     *\n     * @author Oliver Lillie\n     */\n    bindEventHandlers() {\n        this.onSubmitParent = this.onSubmitParent.bind(this);\n        this.handleFormElementBlur = this.handleFormElementBlur.bind(this);\n    }\n\n    /**\n     * Handles the form element blur event to bubble up if there were/are errors\n     * or not in the form.\n     *\n     * @author Oliver Lillie\n     */\n    handleFormElementBlur() {\n        if(Object.keys(this.props.errors).length === 0) {\n            this.props.onNoErrorEncountered();\n        } else {\n            this.props.onErrorEncountered();\n        }\n    }\n\n    /**\n     * Performs the validation of the form.\n     *\n     * If the validation fails then the form is forced into an error state to\n     * show the error to the user by forcing the touched value inside formic.\n     *\n     * If the validation passes then the modal is put into a processing state\n     * and the `props.onSubmitParent` callback is called. The promise returned\n     * by the call, when resolved or rejected takes the modal out of a\n     * processing state.\n     *\n     * @author Oliver Lillie\n     * @param {Event} event\n     * @param {Object} errors\n     * @param {Object} values\n     */\n    onSubmitParent(event, errors, values) {\n        event.preventDefault();\n\n        this.props.validateForm().then(\n            () => {\n                if(Object.keys(this.props.errors).length > 0) {\n                    this.setFieldsTouched(true);\n                    this.setState({\n                        showErrors: true\n                    });\n                    return;\n                }\n\n                this.props.setSubmitting(true);\n                this.setState({\n                    showErrors: false\n                });\n\n                const promise = this.props.onSubmitParent(errors, values);\n                if(promise && typeof promise.then === 'function') {\n                    promise.then(() => this.props.setSubmitting(false))\n                        .catch(() => this.props.setSubmitting(false));\n                } else {\n                    this.props.setSubmitting(false);\n                }\n            },\n            () => {\n                this.setState({\n                    showErrors: true\n                })\n            }\n        ).catch(\n            () => {\n            }\n        );\n    }\n\n    /**\n     * Updates the fields, inside the form, `touched` value.\n     *\n     * @author Oliver Lillie\n     * @param {boolean} touched\n     */\n    setFieldsTouched(touched) {\n        const obj = {};\n        this.getFieldComponents().forEach((field) => obj[field.name] = touched);\n        this.props.setTouched(obj);\n    }\n\n    /**\n     * Returns the list of fields for the lab test form.\n     *\n     * @author Oliver Lillie\n     * @return {*[]}\n     */\n    getFieldComponents() {\n        return [\n            {\n                name: 'name',\n                label: 'Test name',\n                type: 'text',\n                hint: 'This is the full name of the test, but without any abbreviation.',\n                minLength: 2,\n                maxLength: 255,\n                required: true,\n                pattern: null\n            },\n            {\n                name: 'abbrv',\n                label: 'Abbreviation for test',\n                hint: 'This must be the officially recognised abbreviation for the test.',\n                type: 'text',\n                minLength: 1,\n                maxLength: 5,\n                required: true,\n                pattern: null\n            },\n            {\n                name: 'unit',\n                label: 'Unit of measurement',\n                hint: 'eg. mmol/l, %, g/l etc',\n                type: 'text',\n                minLength: 1,\n                maxLength: 20,\n                required: true,\n                pattern: null\n            },\n            {\n                name: 'goodRangeMin',\n                label: 'Min. bound for \"good value\"',\n                hint: 'Only enter the numeric value, do not enter the unit of measurement.\\nIf there is no minimum bound, leave empty.',\n                type: 'number',\n                minLength: null,\n                maxLength: 100,\n                required: false\n            },\n            {\n                name: 'goodRangeMax',\n                label: 'Max. bound for \"good value\"',\n                hint: 'Only enter the numeric value, do not enter the unit of measurement.\\nIf there is no maximum bound, leave empty.',\n                type: 'number',\n                minLength: null,\n                maxLength: 100,\n                required: false\n            }\n        ];\n    }\n\n    /**\n     * Returns the `FormTableRow` components ready to put into the form.\n     *\n     * @author Oliver Lillie\n     * @return {*[]}\n     */\n    getFields() {\n        return this.getFieldComponents().map((field) => {\n            return (\n                <FormTableRow\n                    key={field.name}\n                    field={field}\n                    error={this.props.errors[field.name]}\n                    value={this.props.values[field.name] === null ? '' : this.props.values[field.name]}\n                    isSubmitting={this.props.isSubmitting}\n                    touched={this.props.touched[field.name]}\n                    forceShowError={this.state.showErrors}\n                    onBlur={this.handleFormElementBlur}\n                />\n            )\n        });\n    }\n\n    /**\n     * Returns the classes to be added to the form div wrapper.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedClassName() {\n        let classes = ['lab-test-form'];\n\n        if(this.props.loading) {\n            classes.push('lab-test-form--loading');\n        } else {\n            classes.push('lab-test-form--loaded');\n        }\n\n        return classes.join(' ');\n    }\n\n    render() {\n        const {\n            errors,\n            values,\n            isSubmitting,\n            registerSubmitElement\n        } = this.props;\n\n        return (\n            <div className={this.getDerivedClassName()}>\n                <div className=\"loader\">\n                    <span>{this.props.loadingMessage}</span>\n                    <Icon icon=\"spinner\" spin={true} />\n                </div>\n\n                <form onSubmit={(event) => this.onSubmitParent(event, errors, values)} ref={this.form}>\n                    <table>\n                        <tbody>\n                            {this.getFields()}\n                        </tbody>\n                    </table>\n                    \n                    <button ref={button => registerSubmitElement(button)} style={{display: 'none'}} type=\"submit\" disabled={isSubmitting}>\n                        Submit\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default formikEnhancer(LaboratoryTestForm);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport _Modal from \"../_Modal/component\";\nimport LaboratoryTestForm from \"../LaboratoryTestForm/component\";\n\n/**\n * Extends _Modal and uses an empty LaboratoryTestForm component as the value of\n * the modal.\n * \n * @author Oliver Lillie\n */\nexport default class LaboratoryModalCreateItem extends _Modal {\n\n    static propTypes = {\n        ..._Modal.propTypes,\n        /** A callback for the parent component be notified about when a form\n            is successfully saved and a new lab test is created. The `json.data`\n            value is provided as the main argument. **/\n        onSaved: PropTypes.func.isRequired,\n        /** The success message given to the modal primary action button when\n            a successfull create request is made. **/\n        saveSuccessMessage: PropTypes.string\n    };\n\n    static defaultProps = {\n        ..._Modal.defaultProps,\n        header: 'Create Laboratory Test',\n        description: 'Fill the requested fields below and click \"Save New Lab Test\" to add a new laboratory test.',\n        saveButtonIcon: 'add',\n        saveButtonLabel: 'Save New Lab Test',\n        saveSuccessMessage: 'Lab test added ok!'\n    };\n\n    /**\n     * This is a Formik workaround to allow a button outside of the scope of the\n     * Formik form to submit the formik form. Not pretty, but it does allow the\n     * formik form to work inside a modular modal window.\n     *\n     * @author Oliver Lillie\n     * @see LaboratoryModalCreateItem.handleModalSubmit\n     * @param {Element} submitButton\n     */\n    registerSubmitElement(submitButton) {\n        this.submitButton = submitButton;\n    }\n\n    /**\n     * This is a Formik workaround to allow a button outside of the scope of the\n     * Formik form to submit the formik form. Not pretty, but it does allow the\n     * formik form to work inside a modular modal window.\n     *\n     * @author Oliver Lillie\n     * @see LaboratoryModalCreateItem.registerSubmitElement\n     * @param event\n     */\n    handleModalSubmit(event) {\n        this.submitButton.click();\n    }\n\n    /**\n     * Commits the form values to the API.\n     *\n     * If the API returns successfully then the `props.onSaved` callback is\n     * fired.\n     *\n     * @param {object} values\n     * @return {Promise<any>}\n     */\n    commitForm(values) {\n        return new Promise((resolve, reject) => {\n            fetch('/api/1.0.0/laboratory-tests/create', {\n                method: \"POST\",\n                mode: \"cors\",\n                cache: \"no-cache\",\n                credentials: \"same-origin\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                redirect: \"follow\",\n                referrer: \"no-referrer\",\n                body: JSON.stringify(values),\n            })\n                .then((response) => response.json())\n                .then(json => {\n                    if(json.status === false) {\n                        reject(json);\n                    } else {\n                        resolve(json.data);\n                        this.props.onSaved(json.data);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Handles the submission of the modal window from the click of the positive\n     * modal action button - or - submit of manual the formik form.\n     *\n     * When called the errors passed in are checked, then if ok, the state of\n     * the modal is reset and set to processing and the form is commited.\n     *\n     * If the `commitForm`'s returned promise resolves then the processing state\n     * is removed and entered into a success state and the\n     * `props.saveSuccessMessage` is shown to the user. After 1.5 seconds the\n     * modal self closes.\n     *\n     * If not succesfull then the modal is set into an error state.\n     *\n     * @author Oliver Lillie\n     * @param {Object} errors\n     * @param {Object} values\n     * @return {Promise<any>}\n     */\n    onSubmit(errors, values) {\n        return new Promise((resolve, reject) => {\n            if(Object.keys(errors).length === 0) {\n                this.removeModalState();\n                this.setModalAsProcessing();\n                this.commitForm(values)\n                    .then((json) => {\n                        this.removeModalProcessingState();\n                        this.setModalStateAsSuccess(this.props.saveSuccessMessage, true);\n                        this.delay(\n                            () => {\n                                this.closeModal();\n                            },\n                            1500\n                        );\n                    })\n                    .catch((json) => {\n                        this.removeModalProcessingState();\n                        this.setModalStateAsError(json.error.message, true);\n                        reject();\n                    });\n            } else {\n                this.setModalStateAsError('Please fix the errors above', true);\n                reject();\n            }\n        });\n    }\n\n    /**\n     * Handles the bubbling of no error state from the form to remove any error\n     * state from the modal window.\n     *\n     * @author Oliver Lillie\n     */\n    handleNoErrorEncountered() {\n        this.removeModalState();\n    }\n\n    /**\n     * Returns the content for the modal.\n     *\n     * @author Oliver Lillie\n     * @return {LaboratoryTestForm}\n     */\n    getContent() {\n        return (\n            <LaboratoryTestForm\n                onSubmit={this.handleModalSubmit.bind(this)}\n                onNoErrorEncountered={this.handleNoErrorEncountered.bind(this)}\n                onEncounteredError={this.handleModalSubmit.bind(this)}\n                onSubmitParent={this.onSubmit.bind(this)}\n                registerSubmitElement={this.registerSubmitElement.bind(this)}\n                ref={this.contentRef}\n            />\n        );\n    }\n\n}\n\n","import React from 'react';\n\nimport LaboratoryModalCreateItem from \"../LaboratoryModalCreateItem/component\";\nimport LaboratoryTestForm from \"../LaboratoryTestForm/component\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Extends the `LaboratoryModalCreateItem` modal form and preloads the form with\n * the tests details from the server. When the test data loads from the server\n * the form is hidden from the user and a loading message is shown.\n *\n * @author Oliver Lillie\n */\nexport default class LaboratoryModalEditItem extends LaboratoryModalCreateItem {\n    static propTypes = {\n        ...LaboratoryModalCreateItem.propTypes,\n        /** This is the id of the lab test to load. **/\n        labTestId: PropTypes.number\n    };\n\n    static defaultProps = {\n        ...LaboratoryModalCreateItem.defaultProps,\n        header: 'Edit Laboratory Test',\n        description: 'Update the details of the test in the fields below and then click \"Update Laboratory Test\" to save.',\n        saveButtonIcon: 'save',\n        saveButtonLabel: 'Update Laboratory Test',\n        labTestId:null,\n        saveSuccessMessage: 'Lab test updated!'\n    };\n\n    /**\n     * After the component mounts the data about the lab test is loaded from the\n     * API and put into the components state.\n     *\n     * @author Oliver Lillie\n     */\n    componentDidMount() {\n        if(this.props.labTestId) {\n            this.setTestStateFromApi();\n        }\n    }\n\n    /**\n     * Aborts any active XHR from the component when unmounting to prevent any\n     * updates to the component after it is no longer mounted.\n     *\n     * @author Oliver Lillie\n     */\n    componentWillUnmount() {\n        super.componentWillUnmount();\n\n        this.state.xhrControllerLoad.abort();\n    }\n\n    /**\n     * Updates the initial state of the modal with the default values of the\n     * lab test form.\n     *\n     * @author Oliver Lillie\n     * @return {{hasSuccess: boolean, initialValues: {}, isOpen: Boolean, modalTimeout: number, timeouts: Array, isProcessing: boolean, updateSubmitButtonWithResult: boolean, hasError: boolean, statusMessage: null, status: null}}\n     */\n    getInitialState() {\n        const state = super.getInitialState();\n\n        state.xhrControllerLoad = new AbortController();\n        state.name = '';\n        state.abbrv = '';\n        state.unit = '';\n        state.goodRangeMin = null;\n        state.goodRangeMax = null;\n        state.status = 'unloaded';\n        state.labTestId = null;\n\n        return state;\n    }\n\n    /**\n     * Saves the edit of the lab test to the API.\n     *\n     * If the request is successful then the `props.onSaved` is called with the\n     * `json.data` from the request.\n     *\n     * @author Oliver Lillie\n     * @param {Object} values\n     * @return {Promise<any>}\n     */\n    commitForm(values) {\n        return new Promise((resolve, reject) => {\n            fetch('/api/1.0.0/laboratory-tests/' + this.props.labTestId, {\n                method: \"PUT\",\n                mode: \"cors\",\n                cache: \"no-cache\",\n                credentials: \"same-origin\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                redirect: \"follow\",\n                referrer: \"no-referrer\",\n                body: JSON.stringify(values),\n            })\n                .then((response) => response.json())\n                .then(json => {\n                    if(json.status === false) {\n                        reject(json);\n                    } else {\n                        resolve(json.data);\n                        this.props.onSaved(json.data);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Loads the state of the form data from the API and sets the state of the\n     * modal as loading to only show the loading throbber and not the form.\n     *\n     * @author Oliver Lillie\n     * @return {Promise<any>}\n     */\n    loadTestState() {\n        this.setState({\n            status: 'loading'\n        });\n\n        return new Promise((resolve, reject) => {\n            fetch('/api/1.0.0/laboratory-tests/' + this.props.labTestId, {\n                signal: this.state.xhrControllerLoad.signal\n            })\n                .then((response) => response.json())\n                .then(json => {\n                    if(json.status === false) {\n                        this.setState({\n                            status: 'rejected'\n                        });\n\n                        reject(json);\n                    } else {\n                        resolve(json.data);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Request the data load and then sets the resolved data into the modals\n     * current state.\n     *\n     * When the state is set the form is then shown.\n     *\n     * @author Oliver Lillie\n     */\n    setTestStateFromApi() {\n        this.loadTestState().then(\n            (test) => {\n                this.setState({\n                    ...test,\n                    status: 'hydrated',\n                    labTestId: this.props.labTestId\n                });\n            },\n            (json) => {\n                // TODO - or maybe not since this is really just demo code.\n            }\n        )\n    }\n\n    /**\n     * Returns the form for the modal.\n     *\n     * @return {LaboratoryTestForm}\n     */\n    getContent() {\n        return (\n            <LaboratoryTestForm\n                loading={this.state.status !== 'hydrated'}\n                name={this.state.name}\n                abbrv={this.state.abbrv}\n                unit={this.state.unit}\n                goodRangeMin={this.state.goodRangeMin}\n                goodRangeMax={this.state.goodRangeMax}\n                onSubmit={this.handleModalSubmit.bind(this)}\n                onNoErrorEncountered={this.handleNoErrorEncountered.bind(this)}\n                onEncounteredError={this.handleModalSubmit.bind(this)}\n                onSubmitParent={this.onSubmit.bind(this)}\n                registerSubmitElement={this.registerSubmitElement.bind(this)}\n                ref={this.contentRef}\n            />\n        );\n    }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as Yup from \"yup\";\nimport { withFormik } from \"formik\";\n\nimport _Modal from \"../_Modal/component\";\nimport FormTableRow from \"../FormTableRow/component\";\n\nimport './styles.scss';\n\nconst formikEnhancer = withFormik({\n    enableReinitialize: true,\n\n    validateOnBlur: false,\n\n    validateOnChange: false,\n\n    validationSchema: Yup.object().shape({\n        test: Yup.number()\n            .moreThan(0, 'Please select a laboratory test.')\n            .required('Please select a lab test.'),\n        value: Yup.number()\n            .required('Please enter a value to check.')\n            .typeError('The value entered must be a number.')\n    }),\n\n    displayName: 'LaboratoryModalPerformChecks', // helps with React DevTools\n});\n\n/**\n * Creates an instance of a Modal that contains the form for performing a lab\n * test value check.\n *\n * @author Oliver Lillie\n */\nclass LaboratoryModalPerformChecks extends _Modal {\n\n    form = React.createRef();\n\n    static propTypes = {\n        ..._Modal.propTypes,\n        /** Event bubble for when the form is submitted by clicking on the\n            modals primary action button. **/\n        onSaved: PropTypes.func.isRequired,\n        /** The list of available tests to check. **/\n        tests: PropTypes.arrayOf(\n            PropTypes.shape({\n                /** The id of the lab test. **/\n                id: PropTypes.number.isRequired,\n                /** The abbreviation of the lab test. **/\n                abbrv: PropTypes.string,\n                /** The name of the lab test. **/\n                name: PropTypes.string.isRequired,\n            }).isRequired\n        )\n    };\n\n    static defaultProps = {\n        ..._Modal.defaultProps,\n        header: 'Check a Lab Result',\n        description: 'Select a test from the dropdown and then enter the value of the result to check if the result is \"OK\" or \"outside of\" the good range.',\n        cancelButtonLabel: 'Close',\n        saveButtonIcon: 'equals',\n        saveButtonLabel: 'Check Lab Result',\n    };\n\n\n    /**\n     * This is a Formik workaround to allow a button outside of the scope of the\n     * Formik form to submit the formik form. Not pretty, but it does allow the\n     * formik form to work inside a modular modal window.\n     *\n     * @author Oliver Lillie\n     * @see LaboratoryModalPerformChecks.handleModalSubmit\n     * @param {Element} submitButton\n     */\n    registerSubmitElement(submitButton) {\n        this.submitButton = submitButton;\n    }\n\n    /**\n     * This is a Formik workaround to allow a button outside of the scope of the\n     * Formik form to submit the formik form. Not pretty, but it does allow the\n     * formik form to work inside a modular modal window.\n     *\n     * @author Oliver Lillie\n     * @see LaboratoryModalPerformChecks.registerSubmitElement\n     * @param event\n     */\n    handleModalSubmit(event) {\n        this.submitButton.click();\n    }\n\n    /**\n     * Handles form element blur to bubble error corrections up the component\n     * stack.\n     *\n     * @author Oliver Lillie\n     */\n    handleFormElementBlur() {\n        if(Object.keys(this.props.errors).length === 0) {\n            this.props.onNoErrorEncountered();\n        } else {\n            this.props.onErrorEncountered();\n        }\n    }\n\n    /**\n     * Handles the form submission.\n     *\n     * It first validates the form for missing/incorrect requirements. If the\n     * validation fails the modal is set into an error state.\n     *\n     * If ok it then puts the modal into a processing state and sends the\n     * request off to the API for checking of the result. When the result\n     * returns, it sets an error state for a value that is outside of the good\n     * range, and if the value is inside the good range the modal is entered\n     * into a success state. In either case the message that is returned from\n     * the server regarding the result is displayed to the user.\n     *\n     * The modal is not automatically closed since the user might want to\n     * perform and additional value test.\n     *\n     * @author Oliver Lillie\n     * @param {Event} event\n     * @param {Object} errors\n     * @param {Object} values\n     */\n    onSubmitParent(event, errors, values) {\n        event.preventDefault();\n\n        this.props.validateForm().then(\n            () => {\n                if(Object.keys(this.props.errors).length > 0) {\n                    this.setFieldsTouched(true);\n                    this.setState({\n                        showErrors: true\n                    });\n                    return;\n                }\n\n                this.setModalAsProcessing();\n                this.props.setSubmitting(true);\n                this.setState({\n                    showErrors: false\n                });\n\n                const promise = this.submitXhr(values);\n                if(promise && typeof promise.then === 'function') {\n                    promise.then((data) => {\n                        this.props.setSubmitting(false);\n                        this.removeModalProcessingState();\n\n                        if(data.status === false) {\n                            this.setModalStateAsError(data.message, false);\n                        } else {\n                            this.setModalStateAsSuccess(data.message, true);\n                        }\n                    }).catch(() => this.props.setSubmitting(false));\n                } else {\n                    this.props.setSubmitting(false);\n                }\n            },\n            () => {\n                this.setState({\n                    showErrors: true\n                })\n            }\n        ).catch(\n            () => {\n            }\n        );\n    }\n\n    /**\n     * Submits the value check request to the API.\n     *\n     * @author Oliver Lillie\n     * @param {Object} values The form values.\n     * @return {Promise<any>}\n     */\n    submitXhr(values) {\n        return new Promise((resolve, reject) => {\n            fetch(`/api/1.0.0/laboratory-tests/${values.test}/check/${values.value}` )\n                .then((response) => response.json())\n                .then(json => {\n                    if(json.status === false) {\n                        reject(json);\n                    } else {\n                        resolve(json.data);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Sets the fields to touched so that if an error has occured when clicking\n     * the submit button formik will show the errors if `touched` is true.\n     *\n     * @author Oliver Lillie\n     * @param {boolean} touched\n     */\n    setFieldsTouched(touched) {\n        this.props.setTouched({\n            test: touched,\n            value: touched,\n        });\n    }\n\n    /**\n     * Returns a list of class names to be given to the modal.\n     *\n     * @return {string[]}\n     */\n    getDerivedModalClassNameList() {\n        let classes = super.getDerivedModalClassNameList();\n\n        classes.push('lab-test-perform-check');\n\n        return classes;\n    }\n\n    /**\n     * Returns a list of class names to be given to the modal overlay.\n     *\n     * @return {string[]}\n     */\n    getDerivedModalOverlayClassNameList() {\n        let classes = super.getDerivedModalOverlayClassNameList();\n\n        classes.push('lab-test-perform-check');\n\n        return classes;\n    }\n\n    /**\n     * Returns the select for the select tests form element.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedFormTableTestSelect() {\n        const options = this.props.tests.map((test) => {\n            return {\n                value : test.id,\n                label: test.name + (test.abbrv ? ' (' + test.abbrv + ')' : ''),\n            };\n        });\n\n        options.unshift({\n            value: '-1',\n            label: 'Please select test...'\n        });\n\n        const field = {\n            name: 'test',\n            label: 'Laboratory Test',\n            type: 'select',\n            options: options,\n            required: true,\n        };\n\n        return (\n            <FormTableRow\n                key={field.name}\n                field={field}\n                error={this.props.errors[field.name]}\n                value={this.props.values[field.name] || ''}\n                isSubmitting={this.props.isSubmitting}\n                touched={this.props.touched[field.name]}\n                onBlur={this.handleFormElementBlur}\n            />\n        );\n    }\n\n    /**\n     * Returns the number input for the value to check.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedFormTableCheckValue() {\n        const field = {\n            name: 'value',\n            label: 'Value to Check',\n            type: 'number',\n            maxLength: 100,\n            required: true,\n        };\n\n        return (\n            <FormTableRow\n                key={field.name}\n                field={field}\n                error={this.props.errors[field.name]}\n                value={this.props.values[field.name] || ''}\n                isSubmitting={this.props.isSubmitting}\n                touched={this.props.touched[field.name]}\n                onBlur={this.handleFormElementBlur}\n            />\n        );\n    }\n\n    /**\n     * Returns the form content for the modal.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getContent() {\n        const {\n            errors,\n            values,\n            isSubmitting,\n        } = this.props;\n\n        return (\n            <form onSubmit={(event) => this.onSubmitParent(event, errors, values)} ref={this.form}>\n                <table>\n                    <tbody>\n                        {this.getDerivedFormTableTestSelect()}\n                        {this.getDerivedFormTableCheckValue()}\n                    </tbody>\n                </table>\n\n                <button ref={button => this.registerSubmitElement(button)} style={{display: 'none'}} type=\"submit\" disabled={isSubmitting}>\n                    Submit\n                </button>\n            </form>\n        );\n    }\n\n}\n\n\nexport default formikEnhancer(LaboratoryModalPerformChecks);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * A internal compoment for `ListableFilterGroup` that represents a sorting\n * option that a parent component can be sorted by.\n *\n * @author Oliver Lillie\n */\nexport default class ListableFilterOption extends Component {\n    static propTypes = {\n        /** The property the parent list of objects to be sorted by if this\n            option is selected. **/\n        prop: PropTypes.string.isRequired,\n        /** The label of the option. **/\n        label: PropTypes.string.isRequired,\n        /** Determines if the option is currently selected. **/\n        selected: PropTypes.bool,\n        /** Handles the event bubble up to `ListableFilterGroup` when the option\n            becomes selected by a user. **/\n        onClick: PropTypes.func.isRequired,\n    };\n\n    static defaultProps = {\n        selected: false,\n    };\n\n    /**\n     * Binds the events handlers.\n     *\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n\n        this.bindEventHandlers();\n    }\n\n    /**\n     * Binds the event handlers for option clicking to bubble back up to the\n     * parent `ListableFilterGroup`.\n     */\n    bindEventHandlers() {\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * Handles the click of the option.\n     *\n     * @author Oliver Lillie\n     * @param event\n     */\n    handleClick(event) {\n        this.props.onClick(this.props.prop, event);\n    }\n\n    /**\n     * Returns the derived class name depending if it has been selected or not.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedClassName() {\n        if(this.props.selected === true) {\n            return 'selected';\n        }\n\n        return null;\n    }\n\n    render() {\n        return (\n            <li className={this.getDerivedClassName()}\n                onClick={this.handleClick}\n            >{this.props.label}</li>\n        );\n    }\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ListableFilterOption from \"../ListableFilterOption/component\";\n\n/**\n * Provides a Listable filter group that can be used to control the sort/order\n * of the data.\n *\n * @author Oliver Lillie\n */\nexport default class ListableFilterGroup extends Component {\n    static propTypes = {\n        /** The state name used in the parent component state to control the\n            parent components list order. **/\n        sortRef: PropTypes.string.isRequired,\n        /** The header label for the filter group. **/\n        label: PropTypes.string.isRequired,\n        /** The available sort options for the group. **/\n        options: PropTypes.arrayOf(\n            PropTypes.shape({\n                /** The property that the list will sort by if the option is\n                    selected. **/\n                prop: PropTypes.string.isRequired,\n                /** The label of the sort option. **/\n                label: PropTypes.string.isRequired\n            })\n        ),\n        /** The current value of the selected sort option. **/\n        selected: PropTypes.string,\n        /** The event bubble callback for a change in the selected sort options.\n         **/\n        onSelectOption: PropTypes.func.isRequired\n    };\n\n    /**\n     * Binds the event handlers.\n     *\n     * @author Oliver Lillie\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n\n        this.bindEventHandlers();\n    }\n\n    /**\n     * Binds the event handlers to the component.\n     *\n     * @author Oliver Lillie\n     */\n    bindEventHandlers() {\n        this.handleOptionSelect = this.handleOptionSelect.bind(this);\n    }\n\n    /**\n     * Handles the select of an option inside the group and bubbles it up to\n     * the parent component through calling `props.onSelectOption`.\n     *\n     * @author Oliver Lillie\n     * @param {string} prop\n     */\n    handleOptionSelect(prop) {\n        this.props.onSelectOption(this.props.sortRef, prop);\n    }\n\n    /**\n     * Returns the list of available sort options.\n     *\n     * @author Oliver Lillie\n     * @return {ListableFilterOption[]}\n     */\n    getDerivedOptionList() {\n        return this.props.options.map((option) => (\n            <ListableFilterOption\n                key={option.prop}\n                prop={option.prop}\n                label={option.label}\n                onClick={this.handleOptionSelect}\n                selected={this.props.selected === option.prop}\n            />\n        ));\n    }\n\n    render() {\n        return (\n            <li className=\"group\">\n                <label>{this.props.label}</label>\n                <ul>\n                    {this.getDerivedOptionList()}\n                </ul>\n            </li>\n        );\n    }\n};","import ListableFilterGroup from \"../ListableFilterGroup/component\";\n\n/**\n * \"name\" constant for property use when setting the group `props.selected`\n * value.\n *\n * @author Oliver Lillie\n * @type {string}\n */\nconst NAME = 'name';\n\n/**\n * \"abbrv\" constant for property use when setting the group `props.selected`\n * value.\n *\n * @author Oliver Lillie\n * @type {string}\n */\nconst ABBRV = 'abbrv';\n\n/**\n * \"dateUpdated\" constant for property use when setting the group\n * `props.selected` value.\n *\n * @author Oliver Lillie\n * @type {string}\n */\nconst DATE_UPDATED = 'dateUpdated';\n\n/**\n * The filter group options list, set as a constant for exporting.\n *\n * @author Oliver Lillie\n * @type {*[]}\n */\nconst SORT_BY = [\n    {\n        prop: NAME,\n        label: 'Name',\n    },\n    {\n        prop: ABBRV,\n        label: 'Abbreviation',\n    },\n    {\n        prop: DATE_UPDATED,\n        label: 'Date Last Updated',\n    },\n];\n\n/**\n * Creates a filter group that has \"Sort By\" options, ie name/abbrv/dateUpdated.\n *\n * @author Oliver Lillie\n */\nexport default class LaboratoryTestListSortByFilterGroup extends ListableFilterGroup {\n    static defaultProps = {\n        sortRef: 'sortKey',\n        label: 'Sort By',\n        options: SORT_BY,\n        selected: NAME\n    };\n};\n\nexport const defaultOption = NAME;\nexport const options = SORT_BY;","import ListableFilterGroup from \"../ListableFilterGroup/component\";\n\n/**\n * Ascending constant for property use when setting the group `props.selected`\n * value.\n *\n * @author Oliver Lillie\n * @type {string}\n */\nconst ASC = 'asc';\n\n/**\n * Ascending constant for property use when setting the group `props.selected`\n * value.\n *\n * @author Oliver Lillie\n * @type {string}\n */\nconst DESC = 'desc';\n\n/**\n * The filter group options list, set as a constant for exporting.\n *\n * @author Oliver Lillie\n * @type {*[]}\n */\nconst ORDER_BY = [\n    {\n        prop: ASC,\n        label: 'Ascending',\n    },\n    {\n        prop: DESC,\n        label: 'Descending',\n    },\n];\n\n/**\n * Creates a filter group that has \"Order By\" options, ie ASC/DESC.\n *\n * @author Oliver Lillie\n */\nexport default class LaboratoryTestListSortByFilterGroup extends ListableFilterGroup {\n    static defaultProps = {\n        sortRef: 'orderBy',\n        label: 'Order By',\n        options: ORDER_BY,\n        selected: ASC\n    };\n};\n\nexport const defaultOption = ASC;\nexport const options = ORDER_BY;\nexport const props = {\n    ASC,\n    DESC\n};","import _ButtonAction from \"../_ButtonAction/component\";\n\n/**\n * Extends _ButtonAction to create a button component that has a default icon\n * `\"edit\"`.\n *\n * @author Oliver Lillie\n */\nexport default class ButtonEdit extends _ButtonAction {\n    static defaultProps = {\n        ..._ButtonAction.defaultProps,\n        icon: 'edit'\n    };\n};\n","import _ButtonAction from \"../_ButtonAction/component\";\n\nimport './styles.scss';\n\n/**\n * Extends _ButtonAction to create a button component that has a default icon\n * `\"trash\"` which changes on hover over to `\"trash-open\"`. It also removes any\n * default label.\n *\n * @author Oliver Lillie\n */\nexport default class ButtonTrash extends _ButtonAction {\n    static defaultProps = {\n        ..._ButtonAction.defaultProps,\n        icon: 'trash',\n        hoverIcon: 'trash-open',\n        label: null\n    };\n\n    /**\n     * Updates the button classes to contain ButtonTrash classes which give the\n     * button special \"negative\" hover styles to pre-warn a user that they are\n     * about to perform a negative action.\n     *\n     * @author Oliver Lillie\n     */\n    getDerivedClassNameList() {\n        let classes = super.getDerivedClassNameList();\n\n        classes.push('ButtonTrash');\n\n        if(this.props.label) {\n            classes.push('ButtonTrash--has-label');\n        }\n\n        return classes;\n    }\n};\n","import _ModalSimple from \"../_ModalSimple/component\";\n\n/**\n * Extends the _ModalSimple modal component to provide a simple confirmation\n * style modal. It is designed to be extended however provides some sane-ish\n * defaults for header, description and button labels etc.\n *\n * @author Oliver Lillie\n */\nexport default class ConfirmationModal extends _ModalSimple {\n\n    static defaultProps = {\n        ..._ModalSimple.defaultProps,\n        header: 'Confirm Action',\n        description: 'Please confirm you wish do this action.',\n        cancelButtonLabel: 'No',\n        saveButtonIcon: 'tick',\n        saveButtonLabel: 'Yes'\n    };\n\n    /**\n     * Updates the modal class list with `ConfirmationModal` for styling\n     * purposes.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedModalClassNameList() {\n        let classes = super.getDerivedModalClassNameList();\n\n        classes.push('ConfirmationModal');\n\n        return classes;\n    }\n\n}\n\n","import ConfirmationModal from \"../ConfirmationModal/component\";\n\nimport './styles.scss';\nimport PropTypes from \"prop-types\";\n\n/**\n * Extends the ConfirmationModal component to provide a modal that is styled in\n * the form of a \"negative\" feedback modal, ie in your face and different than\n * normal modals so that the user is immediately alerted to a change in tone of\n * the modal.\n *\n * The prop defaults are same, however they should really be overriden by props\n * for user clarity.\n *\n * @author Oliver Lillie\n */\nexport default class ConfirmDeletionModal extends ConfirmationModal {\n\n    static propTypes = {\n        ...ConfirmationModal.propTypes,\n        /** This is the message that is displayed via\n            `_ModalSimple.setModalStateAsSuccess` when a deletion has been\n            performed and the result from the server is ok. **/\n        deletedSuccessMessage: PropTypes.string,\n        /** This is the callback to the parent component that is triggered\n            when the user confirms that they want to delete the item by clicking\n            the positive action button in the modal window. The function must\n            return a promise. If the promise resolves with a message when the\n            deletion has successfully completed then that message is used\n            instead of `props.deletedSuccessMessage`. If the request is not\n            successful then the promise should be rejected with a message to be\n            displayed to the user. **/\n        onConfirm: PropTypes.func.isRequired,\n    };\n\n    static defaultProps = {\n        ...ConfirmationModal.defaultProps,\n        header: 'Confirm Deletion',\n        description: 'Please confirm you wish to delete this item.',\n        cancelButtonLabel: 'Cancel',\n        saveButtonIcon: 'trash',\n        saveButtonHoverIcon: 'trash-open',\n        saveButtonLabel: 'Delete Item',\n        deletedSuccessMessage: 'Item deleted'\n    };\n\n    /**\n     * Updates the modal's overlay class list with `ConfirmDeletionModal` for\n     * styling purposes.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedModalOverlayClassNameList() {\n        let classes = super.getDerivedModalClassNameList();\n\n        classes.push('ConfirmDeletionModal');\n\n        return classes;\n    }\n\n    /**\n     * Updates the modal class list with `ConfirmDeletionModal` for styling\n     * purposes.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedModalClassNameList() {\n        let classes = super.getDerivedModalClassNameList();\n\n        classes.push('ConfirmDeletionModal');\n\n        return classes;\n    }\n\n    /**\n     * Handles the clicking of the positive action button (ie the confirm delete\n     * button). If the `state.isProcessing` is not already true then the modal\n     * has its current state reset and set to processing. The `props.onConfirm`\n     * is then called to send the request to the parent component.\n     *\n     * That request must return a promise. The promise can optionally resolve\n     * or must reject with a message to be presented to the user. If it is\n     * resolved with no message then the `props.deletedSuccessMessage` will be\n     * used instead.\n     *\n     * If resolved then the modal is put into a successfull sate via\n     * `_ModalSimple.setModalStateAsSuccess`, otherwise it will be put into an\n     * error state with `_ModalSimple.setModalStateAsError`.\n     *\n     * If resolved the modal will self close after 1.5 seconds.\n     *\n     * @param event\n     */\n    handleModalSubmit(event) {\n        // prevent double clicking\n        if(this.state.isProcessing) {\n            return;\n        }\n\n        this.removeModalState();\n        this.setModalAsProcessing();\n\n        this.props.onConfirm().then(\n            (message) => {\n                this.removeModalProcessingState();\n                this.setModalStateAsSuccess(message || this.props.deletedSuccessMessage, true);\n                this.delay(\n                    () => {\n                        this.closeModal();\n                    },\n                    1500\n                );\n            },\n            (message) => {\n                this.removeModalProcessingState();\n                this.setModalStateAsError(message, true);\n            }\n        )\n    }\n\n\n}\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ButtonEdit from '../ButtonEdit/component';\nimport ButtonTrash from '../ButtonTrash/component';\n\nimport './styles.scss';\nimport ConfirmDeletionModal from \"../ConfirmDeletionModal/component\";\n\n/**\n * An internal base component for `Listable` to present data within a list. It\n * can be used on its own, however it has very basic presentation and should be\n * extended by a child class for better ui experience.\n *\n * @author Oliver Lillie\n */\nexport default class ListableItem extends Component {\n    static propTypes = {\n        /** The id of the related item to allow edit and delete etc. **/\n        id: PropTypes.number.isRequired,\n        /** The name of the item being presented. **/\n        name: PropTypes.string.isRequired,\n        /** Any other associated data for the item. This would typically be used\n            by any class extending this component. **/\n        item: PropTypes.object.isRequired,\n        /** Determines if the item is editable. If true then an edit button is\n            shown that when clicked triggers the `props.onEdit` callback. **/\n        editable: PropTypes.bool.isRequired,\n        /** Determines if the item is deletable. If true then an delete button\n            is shown that when clicked triggers the `props.onDelete` callback.\n         **/\n        deletable: PropTypes.bool.isRequired,\n        /** The callback for bubbling the edit request up to the parent\n            components **/\n        onEdit: PropTypes.func.isRequired,\n        /** The callback for bubbling the delete request up to the parent\n            components after a confirmation of deletion has taken place. **/\n        onDelete: PropTypes.func.isRequired,\n        /** The description to be entered into the `ConfirmDeletionModal` when\n            the delete button is clicked. **/\n        confirmDeleteDescription: PropTypes.string.isRequired,\n        /** The confirm delete button label of the `ConfirmDeletionModal` when\n            the delete button is clicked. **/\n        confirmDeleteButtonLabel: PropTypes.string.isRequired,\n        /** The message shown to the user when the item is successfully deleted.\n         **/\n        deletedSuccessMessage: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        abbrv: null,\n    };\n\n    /**\n     * Binds the event handlers and sets up the initial state.\n     *\n     * Additionally sets a protected `unmounted` property used to determine if\n     * the component has been unmounted from the DOM.\n     *\n     * @param {Object} props\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            confirmDeleteIsTransitioning: false,\n            confirmDelete: false,\n            timeouts: [],\n        };\n\n        this.bindEventHandlers();\n\n        this.unmounted = false;\n    }\n\n    /**\n     * Sets the protected property `unmounted` so that any delayed actions are\n     * not triggered on the unmounted component which causes errors.\n     *\n     * @author Oliver Lillie\n     */\n    componentWillUnmount() {\n        this.unmounted = true;\n        this.state.timeouts.forEach(clearTimeout);\n    }\n\n    /**\n     * Binds the event handles to the component.\n     *\n     * @author Oliver Lillie\n     */\n    bindEventHandlers() {\n        this.handleEditOnClick = this.handleEditOnClick.bind(this);\n        this.handleDeleteOnClick = this.handleDeleteOnClick.bind(this);\n        this.closeConfirmationModal = this.closeConfirmationModal.bind(this);\n        this.handleDeleteConfirmation = this.handleDeleteConfirmation.bind(this);\n    }\n\n    /**\n     * Used to delay function calls by x millisecs.\n     *\n     * The timeouts created from calling this function are tracked and when the\n     * component is unmounted the setTimeouts are canceled. This is to prevent\n     * any updates to the component from setTimeouts when the modal becomes\n     * unmounted.\n     *\n     * @author Oliver Lillie\n     * @param {Function} fn\n     * @param {number} millisecs\n     */\n    delay(fn, millisecs) {\n        if(this.unmounted === true) {\n            return;\n        }\n\n        this.state.timeouts.push(\n            setTimeout(() => {\n                if(this.unmounted) {\n                    return;\n                }\n                fn();\n            }, millisecs)\n        );\n    }\n\n    /**\n     * Handles the edit onclick event bubble.\n     *\n     * @author Oliver Lillie\n     */\n    handleEditOnClick() {\n        this.props.onEdit(this.props.id);\n    }\n\n    /**\n     * Handles the delete onclick confirmation modal open.\n     *\n     * @author Oliver Lillie\n     */\n    handleDeleteOnClick() {\n        this.setState({\n            confirmDeleteIsTransitioning: true,\n            confirmDelete: true\n        });\n    }\n\n    /**\n     * Handles the confirmation of deletion event bubble.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    handleDeleteConfirmation() {\n        return this.props.onDelete(this.props.id);\n    }\n\n    /**\n     * Closes the confirmation of deletion modal but is put into a timeout\n     * before finally setting the closed state so that the modal has time to\n     * transition out nicely before being removed.\n     *\n     * @author Oliver Lillie\n     */\n    closeConfirmationModal() {\n        this.setState({\n            confirmDelete: false\n        });\n\n        this.delay(\n            () => {\n                this.setState(\n                    {\n                        editModalIsTransitioning: false,\n                    }\n                );\n            },\n            300\n        );\n    }\n\n    /**\n     * Returns the truncated name of the test so that the confirmation button in\n     * the delet econfirmation modal doesn't get too big. Could possibly be done\n     * by css truncation in the future.\n     *\n     * @author Oliver Lillie\n     * @param {number} length The length to truncate to.\n     * @return {string}\n     */\n    getDerivedTruncatedName(length) {\n        if(this.props.name.length > length) {\n            return this.props.name.slice(0, length) + \"...\";\n        }\n        return this.props.name;\n    }\n\n    /**\n     * Returns the `ConfirmDeletionModal` component if the current state allows\n     * it. This is to allow the modal to exist when transitioning from a open ->\n     * closed state.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedConfirmationDeletionModal() {\n        if(!this.state.confirmDelete && !this.state.confirmDeleteIsTransitioning) {\n            return null;\n        }\n\n        return (\n            <ConfirmDeletionModal\n                description={this.props.confirmDeleteDescription.replace('%NAME%', this.props.name)}\n                saveButtonLabel={this.props.confirmDeleteButtonLabel.replace('%NAME%', this.getDerivedTruncatedName(document.documentElement.classList.contains('lte-375') === true ? 23 : 30))}\n                isOpen={this.state.confirmDelete}\n                onRequestClose={this.closeConfirmationModal}\n                deletedSuccessMessage={this.props.deletedSuccessMessage}\n                onConfirm={this.handleDeleteConfirmation}\n                saveButtonHoverType=\"negative\"\n            />\n        );\n    }\n\n    /**\n     * Returns a `ButtonEdit` component to be shown if the item allows editing\n     * via `props.editable`\n     *\n     * @author Oliver Lillie\n     * @return {ButtonEdit|null}\n     */\n    getDerivedEditButton() {\n        if(this.props.editable === false) {\n            return null;\n        }\n\n        return (\n            <ButtonEdit\n                label=\"Edit\"\n                icon=\"edit\"\n                size=\"small\"\n                theme=\"secondary\"\n                onClick={this.handleEditOnClick}\n            />\n        );\n    }\n\n    /**\n     * Returns a `ButtonTrash` component to be shown if the item allows deleting\n     * via `props.deletable`.\n     *\n     * @author Oliver Lillie\n     * @return {ButtonTrash|null}\n     */\n    getDerivedDeleteButton() {\n        if(this.props.editable === false) {\n            return null;\n        }\n\n        return (\n            <ButtonTrash\n                size=\"small\"\n                theme=\"secondary\"\n                onClick={this.handleDeleteOnClick}\n            />\n        );\n    }\n\n    /**\n     * Returns a list of classes to be applied to the list item node depending\n     * on whether or not it is deletable or editable.\n     *\n     * @author Oliver Lillie\n     * @return {string[]}\n     */\n    getDerivedClassList() {\n        let classes = ['listable-item'];\n\n        if(this.props.deletable === true) {\n            classes.push('listable-item--deletable');\n        }\n\n        if(this.props.editable === true) {\n            classes.push('listable-item--editable');\n        }\n\n        return classes;\n    }\n\n    /**\n     * Returns the classes to be added to the list item node.\n     *\n     * @author Oliver Lillie\n     * @return {string}\n     */\n    getDerivedClassName() {\n        return this.getDerivedClassList().join(' ');\n    }\n\n    /**\n     * Returns the intertior of the list item which should typically be extended\n     * by any parent class in order to provide extra details rendering.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedInteriorRendering() {\n        return (\n            <span\n                className=\"name\"\n                onClick={this.props.editable && this.handleEditOnClick}\n            >{this.props.name}</span>\n        );\n    }\n\n    render() {\n        return (<>\n            <li className={this.getDerivedClassName()} key={this.props.id}>\n                {this.getDerivedEditButton()}\n                {this.getDerivedInteriorRendering()}\n                {this.getDerivedDeleteButton()}\n            </li>\n\n            {this.getDerivedConfirmationDeletionModal()}\n\n        </>); \n    }\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ListableItem from '../ListableItem/component';\n\nimport './style.scss';\n\n/**\n * A component for presenting \"listed\" data. It takes in data via `props.data`\n * and then creates `ListableItem` components out of the array of data.\n *\n * @author Oliver Lillie\n */\nexport default class Listable extends Component {\n    static propTypes = {\n        /** The component that is or extends ListableItem that will be used to\n            render the items in the list. **/\n        component: PropTypes.func,\n        /** The array of objects to be listed. Each MUST have at least `id` and\n            `name` properties. **/\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                /** The id of the item. **/\n                id: PropTypes.number.isRequired,\n                /** The name or label of the item. **/\n                name: PropTypes.string.isRequired,\n                /** Determines if the item can be deleted. If not set the\n                    default value is `true`. **/\n                deletable: PropTypes.bool,\n                /** Determines if the item can be edited.  If not set the\n                    default value is `true`. **/\n                editable: PropTypes.bool,\n            })\n        ),\n        /** A callback event for when an item has the edit button or name is\n            clicked **/\n        onEditItem: PropTypes.func.isRequired,\n        /** A callback event for when an item has the delete button is clicked\n         **/\n        onDeleteItem: PropTypes.func.isRequired,\n        /** The text to insert into the delete confirmation modal description.\n         **/\n        confirmDeleteDescription: PropTypes.string,\n        /** The text to insert into the delete confirmation modal confirmation.\n            button label. **/\n        confirmDeleteButtonLabel: PropTypes.string,\n        /** The success message to add to the confirmation modal when the\n            deletion has been carried out. **/\n        deletedSuccessMessage: PropTypes.string,\n        /** The message to display when the list is empty. **/\n        emptyMessage: PropTypes.string.isRequired,\n        /** The message to display to desktop browser size about adding an item.\n         **/\n        emptyMessageAddItemDesktop: PropTypes.string.isRequired,\n        /** The message to display to mobile browser size about adding an item.\n         **/\n        emptyMessageAddItemResponsive: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        component: ListableItem,\n        confirmDeleteDescription: 'Please confirm you wish to delete this item.',\n        confirmDeleteButtonLabel: 'Delete Item',\n        deletedSuccessMessage: 'Item deleted ok',\n    };\n\n    /**\n     * Binds event handlers.\n     *\n     * @author Oliver Lillie\n     * @param {Object} props\n     */\n    constructor(props) {\n        super(props);\n\n        this.bindEventHandlers();\n    }\n\n    /**\n     * Binds events handles to the components.\n     *\n     * @author Oliver Lillie\n     */\n    bindEventHandlers() {\n        this.handleListableItemEdit = this.handleListableItemEdit.bind(this);\n        this.handleListableItemDelete = this.handleListableItemDelete.bind(this);\n    }\n\n    /**\n     * Bubbles the onEditItem request up to the parent component.\n     *\n     * @author Oliver Lillie\n     * @param {number} id\n     */\n    handleListableItemEdit(id) {\n        this.props.onEditItem(id);\n    }\n\n    /**\n     * Bubbles the onDeleteItem request up to the parent component.\n     *\n     * @author Oliver Lillie\n     * @param {number} id\n     */\n    handleListableItemDelete(id) {\n        return this.props.onDeleteItem(id);\n    }\n\n    /**\n     * Returns the dervied empty list message.\n     *\n     * @return {Element}\n     */\n    getDerivedEmptyMessage() {\n        if(this.props.data.length > 0) {\n            return null;\n        }\n\n        return (<>\n            <p className=\"empty\">{this.props.emptyMessage}\n                <span className=\"hide-on-lte-768\"><br />{this.props.emptyMessageAddItemDesktop}</span>\n                <span className=\"hide-on-gt-768\"><br />{this.props.emptyMessageAddItemResponsive}</span></p>\n        </>);\n    }\n\n    /**\n     * Returns the `ListableItem` (or other dending on `props.component`\n     * components.\n     *\n     * @return {*[]}\n     */\n    getDerivedItems() {\n        const ComponentName = this.props.component;\n        return this.props.data.map((item) => {\n            return (\n                <ComponentName\n                    key={item.id}\n                    id={item.id}\n                    name={item.name}\n                    editable={item.editable || true}\n                    deletable={item.deletable || true}\n                    item={item}\n                    onEdit={this.handleListableItemEdit}\n                    onDelete={this.handleListableItemDelete}\n                    confirmDeleteDescription={this.props.confirmDeleteDescription}\n                    confirmDeleteButtonLabel={this.props.confirmDeleteButtonLabel}\n                    deletedSuccessMessage={this.props.deletedSuccessMessage}\n                />\n            );\n        });\n    }\n\n    render() {\n        return (<>\n            {this.getDerivedEmptyMessage()}\n            <ul>\n                {this.getDerivedItems()}\n            </ul>\n        </>);\n    }\n}\n\n\n","import _ButtonAction from \"../_ButtonAction/component\";\n\n/**\n * Extends _ButtonAction to create a button component that has a default icon\n * `\"add\"`.\n *\n * @author Oliver Lillie\n */\nexport default class ButtonAdd extends _ButtonAction {\n    static defaultProps = {\n        ..._ButtonAction.defaultProps,\n        icon: 'add'\n    };\n};\n","import React from 'react';\nimport ListableItem from \"../ListableItem/component\";\n\nimport './styles.scss';\n\n/**\n * Extends the `ListableItem`component to provide rendering of the lab test\n * abbreviations.\n *\n * @author Oliver Lillie\n */\nexport default class LaboratoryTestListItem extends ListableItem {\n\n    /**\n     * Returns a span for the abbreviation if found in `props.item.abbrv`.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedAbbreviation() {\n        if(!this.props.item.abbrv) {\n            return null;\n        }\n\n        return (\n            <span className=\"abbrv\">{this.props.item.abbrv}</span>\n        );\n    }\n\n    /**\n     * Adds the abbreviation into the default rendering of the listable item.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedInteriorRendering() {\n        return (<>\n            {super.getDerivedInteriorRendering()}\n            {this.getDerivedAbbreviation()}\n        </>);\n    }\n};\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\nimport LaboratoryModalCreateItem from '../LaboratoryModalCreateItem/component';\nimport LaboratoryModalEditItem from '../LaboratoryModalEditItem/component';\nimport LaboratoryModalPerformChecks from '../LaboratoryModalPerformChecks/component';\nimport LaboratoryTestListSortByFilterGroup, { defaultOption as defaultSortKey } from \"../LaboratoryTestListSortByFilterGroup/component\";\nimport LaboratoryTestListOrderByFilterGroup, { defaultOption as defaultOrderBy, props as orderByProps } from \"../LaboratoryTestListOrderByFilterGroup/component\";\nimport Listable from '../Listable/component';\nimport Button from \"../_Button/component\";\nimport ButtonAdd from \"../ButtonAdd/component\";\nimport Icon from \"../Icon/component\";\nimport LaboratoryTestListItem from \"../LaboratoryTestListItem/component\";\n\nimport './styles.scss';\n\n/**\n * This is the main app component that lists out the data and sets up the\n * display logic of the main listing of tests, main actions, and list filters.\n *\n * Whilst this code is really just doing the lab tests the component is setup\n * in a more generic way since it could easily be extended further to be more of\n * a generic list compoment.\n *\n * @author Oliver Lillie\n */\nexport default class LaboratoryTestList extends Component {\n\n    /** A reference used for toggling the responsive hide/show of the filters\n        menu. **/\n    filters = React.createRef();\n\n    static propTypes = {\n        /** The header of the list page. **/\n        header: PropTypes.string.isRequired,\n        /** The list can optionally have a description at the top of the page.\n            If provided it is entered into a `<details>` element. **/\n        description: PropTypes.string,\n        /** If description is set, then this is the associated `<summary>`\n            content. **/\n        summary: PropTypes.string,\n    };\n\n    static defaultProps = {\n        summary: 'More Information',\n        description: null,\n    };\n\n    /**\n     * Sets the inital state and binds the event handlers.\n     *\n     * @author Oliver Lillie\n     * @param {Object} props\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            sortKey: defaultSortKey,\n            orderBy: defaultOrderBy,\n            processingAdd: false,\n            performChecksModalIsOpen: false,\n            createModalIsOpen: false,\n            editModalIsOpen: false,\n            labTestId: false,\n            list: []\n        };\n\n        this.bindEventHandlers();\n    }\n\n    /**\n     * Loads up the list data from the API when the component has mounted.\n     *\n     * @author Oliver Lillie\n     */\n    componentDidMount() {\n        this.setListStateFromApi();\n    }\n\n    /**\n     * Binds all the event handlers.\n     *\n     * @author Oliver Lillie\n     */\n    bindEventHandlers() {\n        this.closeCreateItemModalEditor = this.closeCreateItemModalEditor.bind(this);\n        this.closeEditItemModalEditor = this.closeEditItemModalEditor.bind(this);\n\n        this.handleResponsiveHeaderClick = this.handleResponsiveHeaderClick.bind(this);\n        this.handleResponsiveFilterNavClick = this.handleResponsiveFilterNavClick.bind(this);\n        this.handleResponsiveScrollerClick = this.handleResponsiveScrollerClick.bind(this);\n\n        this.handleSort = this.handleSort.bind(this);\n\n        this.handleButtonAddTest = this.handleButtonAddTest.bind(this);\n        this.handleLabTestCreated = this.handleLabTestCreated.bind(this);\n\n        this.handleOnEditItem = this.handleOnEditItem.bind(this);\n        this.handleOnDeleteItem = this.handleOnDeleteItem.bind(this);\n        this.handleLabTestUpdated = this.handleLabTestUpdated.bind(this);\n\n        this.handleButtonPerformChecks = this.handleButtonPerformChecks.bind(this);\n        this.closePerformChecksModalEditor = this.closePerformChecksModalEditor.bind(this);\n    }\n\n    /**\n     * Requests the lab tests list data from the API and returns that data in\n     * a resolved promise.\n     *\n     * The promise is rejected if the API returns a `json.status` = false\n     * result.\n     *\n     * @return {Promise<any>}\n     */\n    loadListState() {\n        return new Promise((resolve, reject) => {\n            fetch('/api/1.0.0/laboratory-tests')\n                .then((response) => response.json())\n                .then(json => {\n                    if(json.status === false) {\n                        reject(json);\n                    } else {\n                        resolve(json.data);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Request the list data to be loaded and then after that resolves it sets\n     * it into the components state.\n     *\n     * @author Oliver Lillie\n     */\n    setListStateFromApi() {\n        this.loadListState().then(\n            (list) => {\n                this.setState({\n                    list,\n                    loading: false,\n                });\n            },\n            (json) => {\n                // TODO - or not, this is just demo code.\n            }\n        )\n    }\n\n    /**\n     * Handles the click of the header. When at or below the `lte-600`\n     * breakpoint, the click toggles the filters `open` class to hide show the\n     * filters menu.\n     *\n     * @author Oliver Lillie\n     */\n    handleResponsiveHeaderClick() {\n        if(document.documentElement.classList.contains('lte-600')) {\n             this.filters.current.classList.toggle('open');\n        }\n    }\n\n    /**\n     * When at or below the `lte-600` and the nav is open, any click on it,\n     * including the filter options will close the menu again. Whilst this is\n     * \"kinda ok\" user experience, in a proper user facing app more attention\n     * would be paid to the responsive menu including swiping events etc.\n     *\n     * @author Oliver Lillie\n     */\n    handleResponsiveFilterNavClick() {\n        if(document.documentElement.classList.contains('lte-600')) {\n             this.filters.current.classList.toggle('open');\n        }\n    }\n\n    /**\n     * When clicking anywhere in the scroller, and at the `lte-600` breakpoint\n     * any open menu is closed.\n     *\n     * @author Oliver Lillie\n     */\n    handleResponsiveScrollerClick() {\n        if(document.documentElement.classList.contains('lte-600')) {\n             this.filters.current.classList.remove('open');\n        }\n    }\n\n    /**\n     * Handles the click of the \"Add Test\" secondary action.\n     *\n     * @author Oliver Lillie\n     */\n    handleButtonAddTest() {\n        this.openCreateItemModalEditor().then(\n            () => {\n                this.setState({\n                    processingAdd: false\n                });\n            }\n        );\n    }\n\n    /**\n     * Handles the click of the \"Perform Checks...\" primary action.\n     *\n     * @author Oliver Lillie\n     */\n    handleButtonPerformChecks() {\n        this.openPerformChecksModalEditor();\n    }\n\n    /**\n     * Handles the event when a lab test has been created from a \"create item\"\n     * modal. It pushes the data into the `state.list` array which rebuilds the\n     * list.\n     *\n     * @author Oliver Lillie\n     * @param {Object} object\n     */\n    handleLabTestCreated(object) {\n        const list = this.state.list;\n        list.push(object);\n\n        this.setState({\n            list: list\n        });\n    }\n\n    /**\n     * Handles the event when a lab test has been updated from the edit modal.\n     * The existing test in `state.list` is found and replaced which in turn\n     * causes the list to re-render.\n     *\n     * @author Oliver Lillie\n     * @param {Object} object\n     */\n    handleLabTestUpdated(object) {\n        const list = this.state.list;\n        const index = list.findIndex((item) => item.id === object.id);\n        list.splice(index, 1, object);\n\n        this.setState({\n            list: list\n        });\n    }\n\n    /**\n     * Handles the \"edit\" click, either from the edit button in the list items\n     * or clicking on the name of the test in the list item and opens up the\n     * editor modal.\n     *\n     * @author Oliver Lillie\n     * @param {number} labTestId\n     */\n    handleOnEditItem(labTestId) {\n        this.setState({\n            editingLabTestId: labTestId\n        }, () => {\n            this.openEditItemModalEditor();\n        });\n    }\n\n    /**\n     * Handles the delete API request of a lab test which is called after the\n     * user has confirmed that they want to delete the test.\n     *\n     * The actual remove item is done in a delay in order to prevent the\n     * deletion of the test item from removing the confirmation modal before it\n     * has shown the deletion message and faded nicely away.\n     *\n     * @author Oliver Lillie\n     * @param {number} labTestId\n     * @return {Promise<any>}\n     */\n    handleOnDeleteItem(labTestId) {\n        return new Promise((resolve, reject) => {\n            fetch('/api/1.0.0/laboratory-tests/' + labTestId, {\n                method: 'DELETE'\n            })\n                .then((response) => response.json())\n                .then(json => {\n                    if(json.status === false) {\n                        reject(json.error.message);\n                    } else {\n                        // this is done in a set timeout to ensure that the fade\n                        // out animation of the modal is not affected by react\n                        // removing the modal node when the list item is removed\n                        setTimeout(() => {\n                            this.removeItemFromDataAndUpdateState(labTestId);\n                        }, 1900);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Finds and removes the related lab test from `state.list` which causes the\n     * list to refresh.\n     *\n     * @author Oliver Lillie\n     * @param {number} labTestId\n     */\n    removeItemFromDataAndUpdateState(labTestId) {\n        const list = this.state.list;\n        const index = list.findIndex((item) => item.id === labTestId);\n        list.splice(index, 1);\n\n        this.setState({\n            list: list\n        });\n    }\n\n    /**\n     * Handles the sort state change from the filters.\n     *\n     * @author Oliver Lillie\n     * @param {string} sortRef\n     * @param {string} value\n     */\n    handleSort(sortRef, value) {\n        this.setState({\n            [sortRef]: value\n        });\n    }\n\n    /**\n     * Sorts an array of objects by a key in ascending order.\n     *\n     * @author Oliver Lillie\n     * @param {string} sortKey\n     * @param {object} a\n     * @param {object} b\n     * @return {number}\n     */\n    sortByKeyAscending(sortKey, a, b) {\n        let va = (a[sortKey] === null) ? \"\" : \"\" + a[sortKey];\n        let vb = (b[sortKey] === null) ? \"\" : \"\" + b[sortKey];\n        if(va > vb) {\n            return 1;\n        }\n        return -1;\n    }\n\n    /**\n     * Sorts an array of objects by a key in descending order.\n     *\n     * @author Oliver Lillie\n     * @param {string} sortKey\n     * @param {object} a\n     * @param {object} b\n     * @return {number}\n     */\n    sortByKeyDescending(sortKey, a, b) {\n        let va = (a[sortKey] === null) ? \"\" : \"\" + a[sortKey];\n        let vb = (b[sortKey] === null) ? \"\" : \"\" + b[sortKey];\n        if(va < vb) {\n            return 1;\n        }\n        return -1;\n    }\n\n    /**\n     * Opens up the create item modal by setting state, which returns a promise\n     * that resolves after the state has been set.\n     *\n     * @author Oliver Lillie\n     * @return {Promise<any>}\n     */\n    openCreateItemModalEditor() {\n        return new Promise((resolve) => {\n            this.setState(\n                {\n                    createModalIsOpen: true,\n                    processingAdd: true\n                },\n                resolve\n            );\n        });\n    }\n\n    /**\n     * Closes the create item modal by setting state.\n     *\n     * @author Oliver Lillie\n     */\n    closeCreateItemModalEditor() {\n        this.setState({\n            createModalIsOpen: false\n        });\n    }\n\n    /**\n     * Opens the edit item editor by setting state, which returns a promise that\n     * resolves after the state has been set.\n     *\n     * @author Oliver Lillie\n     * @return {Promise<any>}\n     */\n    openEditItemModalEditor() {\n        return new Promise((resolve) => {\n            this.setState(\n                {\n                    editModalIsOpen: true\n                },\n                resolve\n            );\n        });\n    }\n\n    /**\n     * Closes the edit item modal by setting state.\n     *\n     * @author Oliver Lillie\n     */\n    closeEditItemModalEditor() {\n        this.setState({\n            editModalIsOpen: false\n        });\n    }\n\n    /**\n     * Opens the perform checks modal editor by setting state, which returns a\n     * promise that resolves after the state has been set.\n     *\n     * @return {Promise<any>}\n     */\n    openPerformChecksModalEditor() {\n        return new Promise((resolve) => {\n            this.setState(\n                {\n                    performChecksModalIsOpen: true\n                },\n                resolve\n            );\n        });\n    }\n\n    /**\n     * Closes the perform checks modal by setting state.\n     *\n     * @author Oliver Lillie\n     */\n    closePerformChecksModalEditor() {\n        this.setState({\n            performChecksModalIsOpen: false\n        });\n    }\n\n    /**\n     * Returns the derived class name of the list based of the loadig/loaded\n     * `state.status` of the component.\n     *\n     * @author Oliver Lillie\n     * @return {string}\n     */\n    getDerivedClassName() {\n        let classes = ['list'];\n\n        if(this.state.loading) {\n            classes.push('loading');\n        } else {\n            classes.push('loaded');\n        }\n\n        return classes.join(' ');\n    }\n\n    /**\n     * Returns the sorted list of lab tests.\n     *\n     * @author Oliver Lillie\n     * @return {*}\n     */\n    getDerivedList() {\n        const sortKey = this.state.sortKey;\n        const orderBy = this.state.orderBy;\n        const sortFunction = orderBy === orderByProps.ASC ? 'sortByKeyAscending' : 'sortByKeyDescending';\n\n        return this.state.list.sort((a, b) => this[sortFunction](sortKey, a, b));\n    }\n\n    /**\n     * Returns the `LaboratoryModalCreateItem` component if\n     * `state.createModalIsOpen` is true, since there is no point rendering it\n     * unless it is required.\n     *\n     * @author Oliver Lillie\n     * @return {LaboratoryModalCreateItem|null}\n     */\n    getDerivedModalCreateItem() {\n        if(!this.state.createModalIsOpen) {\n            return null;\n        }\n\n        return (\n            <LaboratoryModalCreateItem\n                isOpen={this.state.createModalIsOpen}\n                onRequestClose={this.closeCreateItemModalEditor}\n                onSaved={this.handleLabTestCreated}\n                saveButtonHoverType=\"positive\"\n            />\n        );\n    }\n\n    /**\n     * Returns the `LaboratoryModalEditItem` component if\n     * `state.editModalIsOpen` is true, since there is no point rendering it\n     * unless it is required.\n     *\n     * @author Oliver Lillie\n     * @return {LaboratoryModalEditItem|null}\n     */\n    getDerivedModalEditItem() {\n        if(!this.state.editModalIsOpen) {\n            return null;\n        }\n\n        return (\n            <LaboratoryModalEditItem\n                isOpen={this.state.editModalIsOpen}\n                labTestId={this.state.editingLabTestId}\n                onRequestClose={this.closeEditItemModalEditor}\n                onSaved={this.handleLabTestUpdated}\n                saveButtonHoverType=\"positive\"\n            />\n        );\n    }\n\n    /**\n     * Returns the `LaboratoryModalPerformChecks` component if\n     * `state.performChecksModalIsOpen` is true, since there is no point\n     * rendering it unless it is required.\n     *\n     * @author Oliver Lillie\n     * @return {LaboratoryModalPerformChecks|null}\n     */\n    getDerivedModalPerformChecks() {\n        if(!this.state.performChecksModalIsOpen) {\n            return null;\n        }\n\n        return (\n            <LaboratoryModalPerformChecks\n                isOpen={this.state.performChecksModalIsOpen}\n                tests={this.state.list}\n                onRequestClose={this.closePerformChecksModalEditor}\n                onSaved={this.handleLabTestUpdated}\n                saveButtonHoverType=\"positive\"\n            />\n        );\n    }\n\n    /**\n     * Returns the derived disabled state value of the perform checks primary\n     * action.\n     *\n     * @author Oliver Lillie\n     * @return {null|Button}\n     */\n    getDerivedPerformChecksActionButton() {\n        if(this.state.list.length === 0) {\n            return null;\n        }\n\n        return (\n            <Button\n                label=\"Perform Checks...\"\n                icon=\"flask-bubbles\"\n                processing={this.state.processingAdd}\n                onClick={this.handleButtonPerformChecks}\n            />\n        );\n    }\n\n    render() {\n        return (<>\n            <nav ref={this.filters}\n                 onClick={this.handleResponsiveFilterNavClick}\n                 className=\"filters\"\n            >\n                <div className=\"container\">\n                    <ul>\n                        <LaboratoryTestListSortByFilterGroup\n                            onSelectOption={this.handleSort}\n                            selected={this.state.sortKey}\n                        />\n\n                        <LaboratoryTestListOrderByFilterGroup\n                            onSelectOption={this.handleSort}\n                            selected={this.state.orderBy}\n                        />\n                        \n                    </ul>\n                </div>\n            </nav>\n\n            <section>\n                <header>\n                    <h1 onClick={this.handleResponsiveHeaderClick}><span>{this.props.header}</span></h1>\n\n                    <span className=\"actions\">\n                        {this.getDerivedPerformChecksActionButton()}\n                        <ButtonAdd\n                            label=\"Add New Lab Test\"\n                            processing={this.state.processingAdd}\n                            onClick={this.handleButtonAddTest}\n                            theme=\"secondary\"\n                        />\n                    </span>\n\n                </header>\n\n                <div className=\"scroller\"\n                     onClick={this.handleResponsiveScrollerClick}\n                >\n                \n                    <details>\n                        <summary>\n                            <Icon icon=\"info\" />\n                            {this.props.summary}\n                        </summary>\n                        <p>{this.props.description}</p>\n                    </details>\n\n                    <main className={this.getDerivedClassName()}>\n\n                        <Listable\n                            component={LaboratoryTestListItem}\n                            data={this.getDerivedList()}\n                            emptyMessage=\"There are no laboratory tests.\"\n                            emptyMessageAddItemDesktop=\"You can add a new test by clicking the &quot;Add New Lab Test&quot; to the top right of the page.\"\n                            emptyMessageAddItemResponsive=\"You can add a new test by clicking the plus icon at the bottom right of the page.\"\n                            onEditItem={this.handleOnEditItem}\n                            onDeleteItem={this.handleOnDeleteItem}\n                            confirmDeleteDescription=\"Are you sure you want to delete the '%NAME%' lab test?\"\n                            confirmDeleteButtonLabel=\"Delete '%NAME%'\"\n                            deletedSuccessMessage=\"Lab test deleted ok!\"\n                        />\n\n                    </main>\n\n                </div>\n\n            </section>\n\n            {this.getDerivedModalCreateItem()}\n\n            {this.getDerivedModalEditItem()}\n\n            {this.getDerivedModalPerformChecks()}\n\n        </>);\n    }\n}\n\n","import React from 'react';\n\nimport Header from \"../Header/component\";\nimport LaboratoryTestList from \"../LaboratoryTestList/component\";\n\nimport './styles.scss';\n\n/**\n * A basic component container for the two main parts of this app.\n * Nothing special happens here.\n *\n * @author Oliver Lillie\n */\nexport default function App() {\n    return (<>\n\n        <Header />\n\n        <LaboratoryTestList\n            header=\"Laboratory Tests\"\n            description=\"The list below contains the list of laboratory tests that are available. Each can be edited by clicking on the edit button, or deleted by clicking on the trash can icon to remove them from the list.\"\n        />\n\n    </>);\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport * as serviceWorker from './serviceWorker';\n\nimport './bootstrap/Polyfill';\nimport Browser from './bootstrap/Browser';\nimport BreakPoints from './bootstrap/BreakPoints';\n\nimport App from './components/App/component';\n\n// bootstrap the apps browser and breakpoint html classes so both css and\n// javascript have access to the breakpoints.\nBrowser.setup();\nBreakPoints.setup();\n\n// Wrap the rendering in a function:\nconst render = () => {\n    ReactDOM.render(\n        // Wrap App inside AppContainer\n        <AppContainer>\n            <App />\n        </AppContainer>,\n        document.getElementById('root')\n    );\n};\n\nserviceWorker.unregister();\n\n// Render once\nrender();\n\n// Webpack Hot Module Replacement API\nif (module.hot) {\n    module.hot.accept('./components/App/component', () => {\n        render();\n    });\n}"],"sourceRoot":""}